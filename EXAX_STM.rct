

stm EXAX {
	requires exax_ops 
	requires StateInf
	transition t0 {
		from i0
		to wait_for_move
	}
initial i0
	state wait_for_move {
	}

	transition t6 {
		from by_position
		to wait_for_move
		condition curr_waypoint < n_waypoints
		action curr_waypoint = curr_waypoint + 1
	}
	transition t7 {
		from by_position
		to reset_EXAX
		condition curr_waypoint >= n_waypoints
	}
var curr_waypoint : nat = 0
	const n_waypoints : nat = 3
	var exax_move : EXAX_move

	event move : EXAX_move

	event done
	state by_position {
		entry go_to_pos ( exax_move . goal_time , exax_move . dist )
	}
	transition t8 {
		from reset_EXAX
		to wait_for_move
	}
	transition t1 {
		from wait_for_move
		to j0
	trigger 
	
		move ? exax_move
		condition sys_state == SystemState :: working \/ sys_state == SystemState :: UR_finished
	}
	event out_of_sync

	state reset_EXAX {
		entry curr_waypoint = 0 ; done
	}
	transition t2 {
		from j0
		to f0
		condition exax_move . goal_time < 0
		action out_of_sync
	}
	transition t3 {
		from j0
		to by_position
		condition exax_move . goal_time >= 0
	}
final f0
	junction j0
transition t4 {
		from wait_for_move
		to wait_for_move
		trigger 
		move ? exax_move
		condition sys_state == SystemState :: EXAX_finished \/ sys_state == SystemState :: wait_for_start
	}
}

