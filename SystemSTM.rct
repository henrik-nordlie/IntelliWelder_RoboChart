
stm System {
	event start_system

	event UR_done

	event EXAX_done
	state wait_for_start {
		entry sys_state = SystemState :: wait_for_start
	}
	state working {
		entry sys_state = SystemState::working
	}
	initial i0
	state UR_finished {
		entry sys_state = SystemState :: UR_finished
	}
	transition t0 {
		from i0
		to wait_for_start
	}
	transition t1 {
		from wait_for_start
		to working
		trigger start_system
	}
	transition t3 {
		from working
		to UR_finished
		trigger 
		
		UR_done
	}
	transition t4 {
		from working
		to EXAX_finished
		trigger 
		
		EXAX_done
	}
	state EXAX_finished {
		entry sys_state = SystemState::EXAX_finished
	}
	junction j0

	transition t2 {
		from UR_finished
		to j0
		trigger EXAX_done
	}
	transition t5 {
		from EXAX_finished
		to j0
		trigger UR_done
	}
	transition t6 {
		from j0
		to wait_for_start
	}
event out_of_sync

	final f0

	transition t7 {
		from working
		to f0
		trigger out_of_sync
	}
	transition t8 {
		from UR_finished
		to f0
		trigger out_of_sync
	}
	transition t9 {
		from EXAX_finished
		to f0
		trigger out_of_sync
	}
requires StateInf }

