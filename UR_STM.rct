stm UR {
	requires ur_ops 
	requires StateInf
	transition t0 {
		from i0
		to wait_for_move
	}
initial i0
	state wait_for_move {
	}

	transition t2 {
		from j0
		to reset_UR
	condition ur_curr_waypoint >= ur_n_waypoints
	}
	transition t3 {
		from j0
		to wait_for_move
	condition ur_curr_waypoint < ur_n_waypoints
		action ur_curr_waypoint = ur_curr_waypoint + 1
	}
	transition t5 {
		from reset_UR
		to wait_for_move
	}
	state reset_UR {
		entry ur_curr_waypoint = 0 ; done
	}

	transition t6 {
		from choose_cmd
		to j0
	condition choosing == false
	}
	junction j0

	transition t1 {
		from wait_for_move
		to j1
		trigger 
	move ? ur_move
	}
	transition t4 {
		from j1
		to f0
		condition ur_move . goal_time < 0
		action out_of_sync
	}
	const ur_n_waypoints : nat = 3
	var ur_curr_waypoint : nat = 0
var ur_move : UR_move

	var big_dist : boolean
event move : UR_move
	event done
	final f0

	transition t7 {
		from j1
		to choose_cmd
		condition ur_move . goal_time >= 0
	}
	state choose_cmd {
		initial i0
		state moveP {
			entry moveP( ur_move .jd1, ur_move .jd2, ur_move .goal_time)
			exit choosing=false
		}
		state big_dist_check {
			entry big_dist = check_big_dist ( ur_move . jd1 , ur_move . jd2 )
		}
		state moveL {
			entry moveL( ur_move .jd1, ur_move .jd2, ur_move .goal_time)
			exit choosing=false
		}
		final f0
		junction j0
		junction j1
		state moveL_with_t {
			entry moveL_with_t( ur_move .jd1, ur_move .jd2, ur_move .goal_time)
			exit choosing=false
		}
		state moveJ {
			entry moveJ( ur_move .jd1, ur_move .jd2, ur_move .goal_time)
			exit choosing=false
		}
		junction j2
		junction j3
		junction j4
		transition t0 {
			from j4
			to big_dist_check
			condition not ur_move . blending
		}
		transition t1 {
			from j4
			to j0
			condition ur_move . blending
		}
		transition t2 {
			from big_dist_check
			to j1
		}
		transition t3 {
			from j1
			to moveL_with_t
			condition not big_dist
		}
		transition t4 {
			from j1
			to moveL
			condition big_dist
		}
		transition t5 {
			from j0
			to moveJ
			condition not ur_move . large_offset
		}
		transition t6 {
			from j0
			to j2
			condition ur_move . large_offset
		}
		transition t7 {
			from j2
			to moveL_with_t
			condition ur_move . sharp_corner
		}
		transition t8 {
			from j2
			to moveP
			condition not ur_move . sharp_corner
		}
		transition t9 {
			from moveL
			to f0
		}
		transition t10 {
			from moveL_with_t
			to j3
		}
		transition t11 {
			from moveP
			to j3
		}
		transition t12 {
			from j3
			to f0
		}
		transition t13 {
			from moveJ
			to f0
		}
		transition t14 {
			from i0
			to j4
		action choosing = true
		}
	}
	junction j1
event out_of_sync
var choosing : boolean
}

