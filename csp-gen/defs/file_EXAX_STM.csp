
--
-- RoboChart generator version 3.0.0.202311281716
-- Automatically generated on 22-04-2024 21:15:24
--
-- Iterated compression status: true
-- Assertions compression status: false
--




module EXAX
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_wait_for_move|
	              NID_by_position|
	              NID_reset_EXAX|
	              NID_f0|
	              NID_j0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_curr_waypoint, set_curr_waypoint, setL_curr_waypoint, setR_curr_waypoint: core_nat
	channel get_exax_move, set_exax_move, setL_exax_move, setR_exax_move: EXAX_move
	channel get_sys_state, set_sys_state, setL_sys_state, setR_sys_state: SystemState
	
	-- Shared variable channels
	channel set_EXT_sys_state: SystemState
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel move__: NIDS.InOut.EXAX_move
	channel move: InOut.EXAX_move
	channel done__: NIDS.InOut
	channel done: InOut
	channel out_of_sync__: NIDS.InOut
	channel out_of_sync: InOut
	
	-- Declaring call and ret events for undefined operations
	channel go_to_posCall: core_real.core_int
	
	enterSS = {|
	i0::enter,
	wait_for_move::enter,
	by_position::enter,
	reset_EXAX::enter,
	f0::enter,
	j0::enter
	|}
	
	enteredSS = 	{|
	wait_for_move::entered,
	by_position::entered,
	reset_EXAX::entered,
	f0::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
		set_EXT_sys_state
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	set_EXT_sys_state, set_sys_state
	,	move,
		done,
		out_of_sync
	,	go_to_posCall
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__,
				    const_EXAX_n_waypoints) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__,
				    const_EXAX_n_waypoints) = D__(id__,
				    const_EXAX_n_waypoints)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: wait_for_move
	module wait_for_move
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_EXAX_n_waypoints) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_EXAX_n_waypoints) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: by_position
	module by_position
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_EXAX_n_waypoints) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(get_exax_move?exax_move -> true&CALL__go_to_pos(
						id__,
					    const_EXAX_n_waypoints,
						EXAX_move_dist(exax_move),
						EXAX_move_time(exax_move)
					)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_EXAX_n_waypoints) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(get_exax_move?exax_move -> true&CALL__go_to_pos(
						id__,
					    const_EXAX_n_waypoints,
						EXAX_move_dist(exax_move),
						EXAX_move_time(exax_move)
					)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: reset_EXAX
	module reset_EXAX
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__,
				    const_EXAX_n_waypoints) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(true & (share__choice(set_curr_waypoint!0 -> SKIP)));true&(share__choice(done.out -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_EXAX_n_waypoints) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= share__choice(true & (share__choice(set_curr_waypoint!0 -> SKIP)));true&(share__choice(done.out -> SKIP)) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Final state: f0
	module f0
	
	exports
	
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
		--	Rule: behaviours(Node)
		D__(id__,
				    const_EXAX_n_waypoints) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
				
				Entering 	= entered -> SKIP ; Active
				Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
				Interrupted	= share__choice(exit -> exited -> Inactive)
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_EXAX_n_waypoints) = D__(id__,
				    const_EXAX_n_waypoints)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: j0
	module j0
	exports
	
		channel enter, interrupt
		
		D__(id__,
				    const_EXAX_n_waypoints) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
				    const_EXAX_n_waypoints) = D__(id__,
				    const_EXAX_n_waypoints)
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	CALL__go_to_pos(id__,
			    const_EXAX_n_waypoints,
				param_dist,
				param_time_budget) 	= go_to_posCall.param_dist.param_time_budget -> SKIP
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__,
			    const_EXAX_n_waypoints) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__,
						    const_EXAX_n_waypoints) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_EXAX_n_waypoints))
	)\sharedVarHide
	
	STM_VS_O(id__,
			    const_EXAX_n_waypoints) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__,
						    const_EXAX_n_waypoints) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__,
				    const_EXAX_n_waypoints))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__,
			    const_EXAX_n_waypoints) = ((let
		Trans = share__choice(get_exax_move?exax_move -> get_curr_waypoint?curr_waypoint -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; wait_for_move::enter -> SKIP))))
			 	 [] dbisim(((curr_waypoint<const_EXAX_n_waypoints))&(internal__!NID_by_position -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_curr_waypoint?curr_waypoint -> true & (share__choice(set_curr_waypoint!Plus(curr_waypoint, 1, core_nat) -> SKIP)))) ; wait_for_move::enter -> SKIP)))
			 	 [] dbisim(((curr_waypoint>=const_EXAX_n_waypoints))&(internal__!NID_by_position -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; reset_EXAX::enter -> SKIP)))
			 	 [] dbisim((true)&(internal__!NID_reset_EXAX -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; wait_for_move::enter -> SKIP)))
			 	 [] dbisim((true)&(move__!NID_wait_for_move.in?exax_move:{exax_move|exax_move <- EXAX_move, true} -> share__choice(set_exax_move!exax_move -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
			 	 [] dbisim(((EXAX_move_time(exax_move)<0))&(internal__!NID_j0 -> SKIP ;  ((true&(share__choice(out_of_sync.out -> SKIP)) ; f0::enter -> SKIP))))
			 	 [] dbisim(((EXAX_move_time(exax_move)>=0))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; by_position::enter -> SKIP))))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__,
			    const_EXAX_n_waypoints) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				wait_for_move::enter,
				by_position::enter,
				reset_EXAX::enter,
				f0::enter,
				j0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,internal__.NID_by_position,internal__.NID_by_position,internal__.NID_reset_EXAX,move__.NID_wait_for_move.in,internal__.NID_j0,internal__.NID_j0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__,
					   		    const_EXAX_n_waypoints)
					   [| { share__, terminate } |] (
					   wait_for_move::D__(id__,
					   		    const_EXAX_n_waypoints)
					   [| { share__, terminate } |] (
					   by_position::D__(id__,
					   		    const_EXAX_n_waypoints)
					   [| { share__, terminate } |] (
					   reset_EXAX::D__(id__,
					   		    const_EXAX_n_waypoints)
					   [| { share__, terminate } |] (
					   f0::D__(id__,
					   		    const_EXAX_n_waypoints)
					   [| { share__, terminate } |] (
					   j0::D__(id__,
					   		    const_EXAX_n_waypoints)
					   )
					   )
					   )
					   )
					   )
					 )
					 [[wait_for_move::interrupt <- x__ | x__ <- {|interrupt,move__.NID_wait_for_move.in|}]]
					 [[by_position::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_by_position,internal__.NID_by_position|}]]
					 [[reset_EXAX::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_reset_EXAX|}]]
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_exax_move |} ]] 
					  [[set_exax_move <- setL_exax_move,set_curr_waypoint <- setL_curr_waypoint]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_exax_move
					 			,setL_curr_waypoint
					 			,setR_exax_move
					 			|}) |]
					 ((i0::enter -> Transitions(id__,
					 		    const_EXAX_n_waypoints))
					  [[ share__ <- x__ | x__ <- {| share__,setL_exax_move,setL_curr_waypoint |} ]]
					  [[set_exax_move <- setR_exax_move]]
					 )
					)[[setL_exax_move <- set_exax_move,setL_curr_waypoint <- set_curr_waypoint]]
					 [[setR_exax_move <- set_exax_move]]
					)
				)
				 \ hideSet)
				[[
					move__.x____ <- move,
					done__.x____ <- done,
					out_of_sync__.x____ <- out_of_sync
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__,
			    const_EXAX_n_waypoints) = 
		dbisim((MachineBody(id__,
				    const_EXAX_n_waypoints)\ enteredSS)
		)
	
	IteratedBehaviour(id__,
			    const_EXAX_n_waypoints) = 
		dbisim((MachineBody(id__,
				    const_EXAX_n_waypoints)\ enteredSS)
		)
	
	Stateful(id__,
			    const_EXAX_n_waypoints) = 
		((
			(Behaviour(id__,
					    const_EXAX_n_waypoints) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_EXAX_n_waypoints))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__,
			    const_EXAX_n_waypoints) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						Behaviour(id__,
								    const_EXAX_n_waypoints)
						[| {|get_exax_move,set_exax_move,terminate|} |]
						Memory_exax_move((0,0))
					)\{|get_exax_move,set_exax_move|}
				)
				[| {|get_curr_waypoint,set_curr_waypoint,terminate|} |]
				Memory_curr_waypoint(0)
			)\{|get_curr_waypoint,set_curr_waypoint|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__,
			    const_EXAX_n_waypoints) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				wait_for_move::enter,
				by_position::enter,
				reset_EXAX::enter,
				f0::enter,
				j0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,internal__.NID_by_position,internal__.NID_by_position,internal__.NID_reset_EXAX,move__.NID_wait_for_move.in,internal__.NID_j0,internal__.NID_j0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__,
					   		    const_EXAX_n_waypoints)
					   [| { share__, terminate } |] (
					   wait_for_move::VS_O__(id__,
					   		    const_EXAX_n_waypoints)
					   [| { share__, terminate } |] (
					   by_position::VS_O__(id__,
					   		    const_EXAX_n_waypoints)
					   [| { share__, terminate } |] (
					   reset_EXAX::VS_O__(id__,
					   		    const_EXAX_n_waypoints)
					   [| { share__, terminate } |] (
					   f0::VS_O__(id__,
					   		    const_EXAX_n_waypoints)
					   [| { share__, terminate } |] (
					   j0::VS_O__(id__,
					   		    const_EXAX_n_waypoints)
					   )
					   )
					   )
					   )
					   )
					 )
					 [[wait_for_move::interrupt <- x__ | x__ <- {|interrupt,move__.NID_wait_for_move.in|}]]
					 [[by_position::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_by_position,internal__.NID_by_position|}]]
					 [[reset_EXAX::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_reset_EXAX|}]]
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__,setR_exax_move |} ]] 
					  [[set_exax_move <- setL_exax_move,set_curr_waypoint <- setL_curr_waypoint]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_exax_move
					 			,setL_curr_waypoint
					 			,setR_exax_move
					 			|}) |]
					 ((i0::enter -> Transitions(id__,
					 		    const_EXAX_n_waypoints))
					  [[ share__ <- x__ | x__ <- {| share__,setL_exax_move,setL_curr_waypoint |} ]]
					  [[set_exax_move <- setR_exax_move]]
					 )
					)[[setL_exax_move <- set_exax_move,setL_curr_waypoint <- set_curr_waypoint]]
					 [[setR_exax_move <- set_exax_move]]
					)
				)
				 \ hideSet)
				[[
					move__.x____ <- move,
					done__.x____ <- done,
					out_of_sync__.x____ <- out_of_sync
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__,
			    const_EXAX_n_waypoints) = 
		dbisim((MachineBody_VS_O(id__,
				    const_EXAX_n_waypoints))
		)
	
	IteratedBehaviour_VS_O(id__,
			    const_EXAX_n_waypoints) = 
		dbisim((MachineBody_VS_O(id__,
				    const_EXAX_n_waypoints))
		)
	
	Stateful_VS_O(id__,
			    const_EXAX_n_waypoints) = 
		dbisim((
			(Behaviour_VS_O(id__,
					    const_EXAX_n_waypoints) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
					    const_EXAX_n_waypoints))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__,
			    const_EXAX_n_waypoints) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						Behaviour_VS_O(id__,
								    const_EXAX_n_waypoints)
						[| {|get_exax_move,set_exax_move,terminate|} |]
						Memory_exax_move((0,0))
					)\{|get_exax_move,set_exax_move|}
				)
				[| {|get_curr_waypoint,set_curr_waypoint,terminate|} |]
				Memory_curr_waypoint(0)
			)\{|get_curr_waypoint,set_curr_waypoint|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_curr_waypoint(curr_waypoint) =
		get_curr_waypoint!curr_waypoint -> Memory_curr_waypoint(curr_waypoint)
		[]
		set_curr_waypoint?x__ -> Memory_curr_waypoint(x__)
		[]
		terminate -> SKIP
	Memory_exax_move(exax_move) =
		get_exax_move!exax_move -> Memory_exax_move(exax_move)
		[]
		set_exax_move?x__ -> Memory_exax_move(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__,
			    const_EXAX_n_waypoints) = Memory_curr_waypoint(0)
	[| { terminate } |] (
	Memory_exax_move((0,0))
	)
	
	getsetLocalChannels = {|get_curr_waypoint,set_curr_waypoint,get_exax_move,set_exax_move|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__,
			    const_EXAX_n_waypoints) = STM_VS_O(id__,
			    const_EXAX_n_waypoints)
	
	D__(id__,
			    const_EXAX_n_waypoints) = STM(id__,
			    const_EXAX_n_waypoints) \ internal_events
	O__(id__,
			    const_EXAX_n_waypoints) = sbisim(diamond(D__(id__,
			    const_EXAX_n_waypoints)))
	VS__(id__,
			    const_EXAX_n_waypoints) = FVS__(id__,
			    const_EXAX_n_waypoints)
	VS_O__(id__,
			    const_EXAX_n_waypoints) = sbisim(diamond(FVS__(id__,
			    const_EXAX_n_waypoints)))
	HEXT__(id__,
			    const_EXAX_n_waypoints) = O__(id__,
			    const_EXAX_n_waypoints) [|shared_variable_events|] SKIP
	HUP__(id__,
			    const_EXAX_n_waypoints) = O__(id__,
			    const_EXAX_n_waypoints) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	Memory_sys_state(sys_state) =
		get_sys_state!sys_state -> Memory_sys_state(sys_state)
		[]
		set_sys_state?x__ -> Memory_sys_state(x__)
		[]
		set_EXT_sys_state?x__ -> Memory_sys_state(x__)
		[]
		terminate -> SKIP
	
	-- sharedVarMemory process
	sharedVarMemory(id__,
			    const_EXAX_n_waypoints) = Memory_sys_state(SystemState_wait_for_start)
	
	sharedVarSync = {|get_sys_state,set_sys_state,set_EXT_sys_state|}
	
	sharedVarHide = {|get_sys_state|}
endmodule


