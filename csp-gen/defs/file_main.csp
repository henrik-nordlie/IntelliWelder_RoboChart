
--
-- RoboChart generator version 3.0.0.202311281716
-- Automatically generated on 14-05-2024 09:23:34
--
-- Iterated compression status: true
-- Assertions compression status: false
--


module main
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel start_system: InOut
	channel next_UR_move: InOut.UR_move
	channel next_EXAX_move: InOut.EXAX_move
	
	channel moveJCall: core_real.core_real.core_int
	channel movePCall: core_real.core_real.core_int
	channel moveLCall: core_real.core_real.core_int
	channel moveL_with_tCall: core_real.core_real.core_int
	channel go_to_posCall: core_real.core_int
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	channel get_sys_state, set_sys_state: SystemState
	
	-- channel set with all visible events
	sem__events = {|
		start_system,
		next_UR_move,
		next_EXAX_move
	,	moveJCall,
		movePCall,
		moveLCall,
		moveL_with_tCall,
		go_to_posCall
	|}
	
	-- declaring controller
		module Controller
			shared_variable_events = {|
				set_EXT_sys_state
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel start_system: InOut
			channel next_UR_move: InOut.UR_move
			channel next_EXAX_move: InOut.EXAX_move
			
			channel set_sys_state: SystemState
			channel get_sys_state: SystemState
			
			channel set_EXT_sys_state: SystemState
			
			-- declaring call and ret events for undefined operations
			channel moveLCall: core_real.core_real.core_int
			channel movePCall: core_real.core_real.core_int
			channel go_to_posCall: core_real.core_int
			channel moveJCall: core_real.core_real.core_int
			channel moveL_with_tCall: core_real.core_real.core_int
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	start_system,
				next_UR_move,
				next_EXAX_move
			,	set_EXT_sys_state, set_sys_state
			,	moveLCall,
				movePCall,
				go_to_posCall,
				moveJCall,
				moveL_with_tCall
			|}
	
			-- defined operations
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_wait_for_start|
				              NID_working|
				              NID_i0|
				              NID_UR_finished|
				              NID_EXAX_finished|
				              NID_j0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_sys_state, set_sys_state, setL_sys_state, setR_sys_state: SystemState
				
				-- Shared variable channels
				channel set_EXT_sys_state: SystemState
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel start_system__: NIDS.InOut
				channel start_system: InOut
				channel UR_done__: NIDS.InOut
				channel UR_done: InOut
				channel EXAX_done__: NIDS.InOut
				channel EXAX_done: InOut
				channel out_of_sync__: NIDS.InOut
				channel out_of_sync: InOut
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				wait_for_start::enter,
				working::enter,
				i0::enter,
				UR_finished::enter,
				EXAX_finished::enter,
				j0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				wait_for_start::entered,
				working::entered,
				UR_finished::entered,
				EXAX_finished::entered,
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_sys_state
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_sys_state, set_sys_state
				,	start_system,
					UR_done,
					EXAX_done,
					out_of_sync
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- State: wait_for_start
				module wait_for_start
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_wait_for_start -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_wait_for_start -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: working
				module working
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_working -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_working -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: UR_finished
				module UR_finished
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_UR_finished -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_UR_finished -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: EXAX_finished
				module EXAX_finished
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_EXAX_finished -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_EXAX_finished -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; wait_for_start::enter -> SKIP))))
						 	 [] dbisim((true)&(start_system__!NID_wait_for_start.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; working::enter -> SKIP)))
						 	 [] dbisim((true)&(UR_done__!NID_working.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; UR_finished::enter -> SKIP)))
						 	 [] dbisim((true)&(EXAX_done__!NID_working.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; EXAX_finished::enter -> SKIP)))
						 	 [] dbisim((true)&(EXAX_done__!NID_UR_finished.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
						 	 [] dbisim((true)&(UR_done__!NID_EXAX_finished.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
						 	 [] dbisim((true)&(internal__!NID_j0 -> SKIP ;  ((SKIP ; wait_for_start::enter -> SKIP))))
						 	 [] dbisim((true)&(out_of_sync__!NID_working.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
						 	 [] dbisim((true)&(out_of_sync__!NID_UR_finished.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
						 	 [] dbisim((true)&(out_of_sync__!NID_EXAX_finished.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							wait_for_start::enter,
							working::enter,
							i0::enter,
							UR_finished::enter,
							EXAX_finished::enter,
							j0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,start_system__.NID_wait_for_start.in,UR_done__.NID_working.in,EXAX_done__.NID_working.in,EXAX_done__.NID_UR_finished.in,UR_done__.NID_EXAX_finished.in,internal__.NID_j0,out_of_sync__.NID_working.in,out_of_sync__.NID_UR_finished.in,out_of_sync__.NID_EXAX_finished.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   wait_for_start::D__(id__)
								   [| { share__, terminate } |] (
								   working::D__(id__)
								   [| { share__, terminate } |] (
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   UR_finished::D__(id__)
								   [| { share__, terminate } |] (
								   EXAX_finished::D__(id__)
								   [| { share__, terminate } |] (
								   j0::D__(id__)
								   [| { share__, terminate } |] (
								   f0::D__(id__)
								   )
								   )
								   )
								   )
								   )
								   )
								 )
								 [[wait_for_start::interrupt <- x__ | x__ <- {|interrupt,start_system__.NID_wait_for_start.in|}]]
								 [[working::interrupt <- x__ | x__ <- {|interrupt,UR_done__.NID_working.in,EXAX_done__.NID_working.in,out_of_sync__.NID_working.in|}]]
								 [[UR_finished::interrupt <- x__ | x__ <- {|interrupt,EXAX_done__.NID_UR_finished.in,out_of_sync__.NID_UR_finished.in|}]]
								 [[EXAX_finished::interrupt <- x__ | x__ <- {|interrupt,UR_done__.NID_EXAX_finished.in,out_of_sync__.NID_EXAX_finished.in|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								start_system__.x____ <- start_system,
								UR_done__.x____ <- UR_done,
								EXAX_done__.x____ <- EXAX_done,
								out_of_sync__.x____ <- out_of_sync
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(Behaviour(id__))
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							wait_for_start::enter,
							working::enter,
							i0::enter,
							UR_finished::enter,
							EXAX_finished::enter,
							j0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,start_system__.NID_wait_for_start.in,UR_done__.NID_working.in,EXAX_done__.NID_working.in,EXAX_done__.NID_UR_finished.in,UR_done__.NID_EXAX_finished.in,internal__.NID_j0,out_of_sync__.NID_working.in,out_of_sync__.NID_UR_finished.in,out_of_sync__.NID_EXAX_finished.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   wait_for_start::VS_O__(id__)
								   [| { share__, terminate } |] (
								   working::VS_O__(id__)
								   [| { share__, terminate } |] (
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   UR_finished::VS_O__(id__)
								   [| { share__, terminate } |] (
								   EXAX_finished::VS_O__(id__)
								   [| { share__, terminate } |] (
								   j0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__)
								   )
								   )
								   )
								   )
								   )
								   )
								 )
								 [[wait_for_start::interrupt <- x__ | x__ <- {|interrupt,start_system__.NID_wait_for_start.in|}]]
								 [[working::interrupt <- x__ | x__ <- {|interrupt,UR_done__.NID_working.in,EXAX_done__.NID_working.in,out_of_sync__.NID_working.in|}]]
								 [[UR_finished::interrupt <- x__ | x__ <- {|interrupt,EXAX_done__.NID_UR_finished.in,out_of_sync__.NID_UR_finished.in|}]]
								 [[EXAX_finished::interrupt <- x__ | x__ <- {|interrupt,UR_done__.NID_EXAX_finished.in,out_of_sync__.NID_EXAX_finished.in|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								start_system__.x____ <- start_system,
								UR_done__.x____ <- UR_done,
								EXAX_done__.x____ <- EXAX_done,
								out_of_sync__.x____ <- out_of_sync
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(Behaviour_VS_O(id__))
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				Memory_sys_state(sys_state) =
					get_sys_state!sys_state -> Memory_sys_state(sys_state)
					[]
					set_sys_state?x__ -> Memory_sys_state(x__)
					[]
					set_EXT_sys_state?x__ -> Memory_sys_state(x__)
					[]
					terminate -> SKIP
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = Memory_sys_state(SystemState_wait_for_start)
				
				sharedVarSync = {|get_sys_state,set_sys_state,set_EXT_sys_state|}
				
				sharedVarHide = {|get_sys_state|}
			endmodule
			module stm_ref1
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_wait_for_move|
				              NID_reset_UR|
				              NID_j0|
				              NID_f0|
				              NID_choose_cmd|
				              NID_j1
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_ur_curr_waypoint, set_ur_curr_waypoint, setL_ur_curr_waypoint, setR_ur_curr_waypoint: core_nat
				channel get_ur_move, set_ur_move, setL_ur_move, setR_ur_move: UR_move
				channel get_big_dist, set_big_dist, setL_big_dist, setR_big_dist: core_boolean
				channel get_choosing, set_choosing, setL_choosing, setR_choosing: core_boolean
				channel get_sys_state, set_sys_state, setL_sys_state, setR_sys_state: SystemState
				
				-- Shared variable channels
				channel set_EXT_sys_state: SystemState
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel move__: NIDS.InOut.UR_move
				channel move: InOut.UR_move
				channel done__: NIDS.InOut
				channel done: InOut
				channel out_of_sync__: NIDS.InOut
				channel out_of_sync: InOut
				
				-- Declaring call and ret events for undefined operations
				channel moveLCall: core_real.core_real.core_int
				channel movePCall: core_real.core_real.core_int
				channel moveJCall: core_real.core_real.core_int
				channel moveL_with_tCall: core_real.core_real.core_int
				
				enterSS = {|
				i0::enter,
				wait_for_move::enter,
				reset_UR::enter,
				j0::enter,
				f0::enter,
				choose_cmd::enter,
				j1::enter
				|}
				
				enteredSS = 	{|
				wait_for_move::entered,
				reset_UR::entered,
				f0::entered,
				choose_cmd::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_sys_state
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_sys_state, set_sys_state
				,	move,
					done,
					out_of_sync
				,	moveLCall,
					movePCall,
					moveJCall,
					moveL_with_tCall
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__,
							    const_UR_ur_n_waypoints) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
							    const_UR_ur_n_waypoints) = D__(id__,
							    const_UR_ur_n_waypoints)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: wait_for_move
				module wait_for_move
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
							    const_UR_ur_n_waypoints) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_UR_ur_n_waypoints) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: reset_UR
				module reset_UR
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
							    const_UR_ur_n_waypoints) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_ur_curr_waypoint!0 -> SKIP)));true&(share__choice(done.out -> SKIP)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_UR_ur_n_waypoints) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_ur_curr_waypoint!0 -> SKIP)));true&(share__choice(done.out -> SKIP)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					D__(id__,
							    const_UR_ur_n_waypoints) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_UR_ur_n_waypoints) = D__(id__,
							    const_UR_ur_n_waypoints)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
							    const_UR_ur_n_waypoints) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_UR_ur_n_waypoints) = D__(id__,
							    const_UR_ur_n_waypoints)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: choose_cmd
				module choose_cmd
				
				enterSS = 
						{|			i0::enter,
							moveP::enter,
							big_dist_check::enter,
							moveL::enter,
							f0::enter,
							j0::enter,
							j1::enter,
							moveL_with_t::enter,
							moveJ::enter,
							j2::enter,
							j3::enter,
							j4::enter
						|}
				enteredSS = 
						{|			moveP::entered,
							big_dist_check::entered,
							moveL::entered,
							f0::entered,
							moveL_with_t::entered,
							moveJ::entered
						|}
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					-- declaring identifiers of transitions
					datatype NIDS = 
					              NID_i0|
					              NID_moveP|
					              NID_big_dist_check|
					              NID_moveL|
					              NID_f0|
					              NID_j0|
					              NID_j1|
					              NID_moveL_with_t|
					              NID_moveJ|
					              NID_j2|
					              NID_j3|
					              NID_j4
					
					channel internal__ : NIDS
					channel move__: NIDS.InOut.UR_move
					channel done__: NIDS.InOut
					channel out_of_sync__: NIDS.InOut
					
					--	Nodes
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						D__(id__,
								    const_UR_ur_n_waypoints) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
						
						VS_O__(id__,
								    const_UR_ur_n_waypoints) = D__(id__,
								    const_UR_ur_n_waypoints)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: moveP
					module moveP
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_UR_ur_n_waypoints) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_ur_move?ur_move -> true&CALL__moveP(
										id__,
									    const_UR_ur_n_waypoints,
										UR_move_jd1(ur_move),
										UR_move_jd2(ur_move),
										UR_move_goal_time(ur_move)
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; share__choice(true & (share__choice(set_choosing!false -> SKIP))) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_UR_ur_n_waypoints) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_ur_move?ur_move -> true&CALL__moveP(
										id__,
									    const_UR_ur_n_waypoints,
										UR_move_jd1(ur_move),
										UR_move_jd2(ur_move),
										UR_move_goal_time(ur_move)
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; share__choice(true & (share__choice(set_choosing!false -> SKIP))) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: big_dist_check
					module big_dist_check
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_UR_ur_n_waypoints) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(share__choice(get_ur_move?ur_move -> true & (share__choice(set_big_dist!check_big_dist(UR_move_jd1(ur_move),UR_move_jd2(ur_move)) -> SKIP)))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_UR_ur_n_waypoints) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(share__choice(get_ur_move?ur_move -> true & (share__choice(set_big_dist!check_big_dist(UR_move_jd1(ur_move),UR_move_jd2(ur_move)) -> SKIP)))) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; SKIP ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: moveL
					module moveL
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_UR_ur_n_waypoints) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_ur_move?ur_move -> true&CALL__moveL(
										id__,
									    const_UR_ur_n_waypoints,
										UR_move_jd1(ur_move),
										UR_move_jd2(ur_move),
										UR_move_goal_time(ur_move)
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; share__choice(true & (share__choice(set_choosing!false -> SKIP))) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_UR_ur_n_waypoints) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_ur_move?ur_move -> true&CALL__moveL(
										id__,
									    const_UR_ur_n_waypoints,
										UR_move_jd1(ur_move),
										UR_move_jd2(ur_move),
										UR_move_goal_time(ur_move)
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; share__choice(true & (share__choice(set_choosing!false -> SKIP))) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						--	Rule: behaviours(Node)
						D__(id__,
								    const_UR_ur_n_waypoints) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
								
								Entering 	= entered -> SKIP ; Active
								Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
								Interrupted	= share__choice(exit -> exited -> Inactive)
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_UR_ur_n_waypoints) = D__(id__,
								    const_UR_ur_n_waypoints)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j0
					module j0
					exports
					
						channel enter, interrupt
						
						D__(id__,
								    const_UR_ur_n_waypoints) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_UR_ur_n_waypoints) = D__(id__,
								    const_UR_ur_n_waypoints)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j1
					module j1
					exports
					
						channel enter, interrupt
						
						D__(id__,
								    const_UR_ur_n_waypoints) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_UR_ur_n_waypoints) = D__(id__,
								    const_UR_ur_n_waypoints)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: moveL_with_t
					module moveL_with_t
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_UR_ur_n_waypoints) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_ur_move?ur_move -> true&CALL__moveL_with_t(
										id__,
									    const_UR_ur_n_waypoints,
										UR_move_jd1(ur_move),
										UR_move_jd2(ur_move),
										UR_move_goal_time(ur_move)
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; share__choice(true & (share__choice(set_choosing!false -> SKIP))) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_UR_ur_n_waypoints) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_ur_move?ur_move -> true&CALL__moveL_with_t(
										id__,
									    const_UR_ur_n_waypoints,
										UR_move_jd1(ur_move),
										UR_move_jd2(ur_move),
										UR_move_goal_time(ur_move)
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; share__choice(true & (share__choice(set_choosing!false -> SKIP))) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: moveJ
					module moveJ
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--	Nodes
						-- declaring all nodes
						
						
						--	Rule: behaviours(Node)
						--  Note that FDR has problems with efficiently compiling the process below
						-- 	if using a different recursion pattern.
						D__(id__,
								    const_UR_ur_n_waypoints) = 
						dbisim(let
							-- IMPLEMENTATION NOTE: 
							-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
							-- however FDR struggles with that form in certain cases. So we use the exception operator
							-- instead to 'terminate'.
							
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_ur_move?ur_move -> true&CALL__moveJ(
										id__,
									    const_UR_ur_n_waypoints,
										UR_move_jd1(ur_move),
										UR_move_jd2(ur_move),
										UR_move_goal_time(ur_move)
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; share__choice(true & (share__choice(set_choosing!false -> SKIP))) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_UR_ur_n_waypoints) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(get_ur_move?ur_move -> true&CALL__moveJ(
										id__,
									    const_UR_ur_n_waypoints,
										UR_move_jd1(ur_move),
										UR_move_jd2(ur_move),
										UR_move_goal_time(ur_move)
									)) ; 
									 	  Behaviour ; 
									 	  share__choice(exit -> SKIP) ; share__choice(true & (share__choice(set_choosing!false -> SKIP))) ; 
									 	  share__choice(exited -> SKIP) ; Inactive
						
							Behaviour 	= entered -> During
							During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
						within
							Inactive [| {terminate} |> SKIP)
						
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j2
					module j2
					exports
					
						channel enter, interrupt
						
						D__(id__,
								    const_UR_ur_n_waypoints) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_UR_ur_n_waypoints) = D__(id__,
								    const_UR_ur_n_waypoints)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j3
					module j3
					exports
					
						channel enter, interrupt
						
						D__(id__,
								    const_UR_ur_n_waypoints) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_UR_ur_n_waypoints) = D__(id__,
								    const_UR_ur_n_waypoints)
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Junction: j4
					module j4
					exports
					
						channel enter, interrupt
						
						D__(id__,
								    const_UR_ur_n_waypoints) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Active 		= share__choice(interrupt -> SKIP) ; Inactive
							within
								Inactive [| {terminate} |> SKIP)
							
						VS_O__(id__,
								    const_UR_ur_n_waypoints) = D__(id__,
								    const_UR_ur_n_waypoints)
					
					endmodule
					----------------------------------------------------------------------
					
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
							    const_UR_ur_n_waypoints) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	moveP::enter,
							 	big_dist_check::enter,
							 	moveL::enter,
							 	f0::enter,
							 	j0::enter,
							 	j1::enter,
							 	moveL_with_t::enter,
							 	moveJ::enter,
							 	j2::enter,
							 	j3::enter,
							 	j4::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_j4,internal__.NID_j4,internal__.NID_big_dist_check,internal__.NID_j1,internal__.NID_j1,internal__.NID_j0,internal__.NID_j0,internal__.NID_j2,internal__.NID_j2,internal__.NID_moveL,internal__.NID_moveL_with_t,internal__.NID_moveP,internal__.NID_j3,internal__.NID_moveJ,internal__.NID_i0|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::D__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   moveP::D__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   big_dist_check::D__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   moveL::D__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   f0::D__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   j0::D__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   j1::D__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   moveL_with_t::D__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   moveJ::D__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   j2::D__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   j3::D__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   j4::D__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[moveP::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_moveP|}]]
							 		 [[big_dist_check::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_big_dist_check|}]]
							 		 [[moveL::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_moveL|}]]
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[moveL_with_t::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_moveL_with_t|}]]
							 		 [[moveJ::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_moveJ|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
							 		 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
							 		 [[j2::interrupt <- x__ | x__ <- {|internal__.NID_j2,internal__.NID_j2|}]]
							 		 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3|}]]
							 		 [[j4::interrupt <- x__ | x__ <- {|internal__.NID_j4,internal__.NID_j4|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		  [[set_big_dist <- setL_big_dist,set_ur_move <- setL_ur_move]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_big_dist
							 		 			,setL_ur_move
							 		|}) |]
							 		 ((i0::enter -> Transitions(id__,
							 		 		    const_UR_ur_n_waypoints))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_big_dist,setL_ur_move |} ]]
							 		 )
							 		)[[setL_big_dist <- set_big_dist,setL_ur_move <- set_ur_move]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		move__.x____ <- move,
							 		done__.x____ <- done,
							 		out_of_sync__.x____ <- out_of_sync
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_big_dist,setR_choosing,setR_ur_move,setR_ur_curr_waypoint,setR_sys_state |} ]] 
							  [[set_big_dist <- setL_big_dist,set_choosing <- setL_choosing,set_ur_move <- setL_ur_move,set_ur_curr_waypoint <- setL_ur_curr_waypoint,set_sys_state <- setL_sys_state]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_big_dist
							 			,setL_choosing
							 			,setL_ur_move
							 			,setL_ur_curr_waypoint
							 			,setL_sys_state
							 			,setR_big_dist
							 			 			,setR_choosing
							 			 			,setR_ur_move
							 			 			,setR_ur_curr_waypoint
							 			 			,setR_sys_state
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_big_dist,setL_choosing,setL_ur_move,setL_ur_curr_waypoint,setL_sys_state |} ]]
							  [[set_big_dist <- setR_big_dist,set_choosing <- setR_choosing,set_ur_move <- setR_ur_move,set_ur_curr_waypoint <- setR_ur_curr_waypoint,set_sys_state <- setR_sys_state]]
							 )
							)[[setL_big_dist <- set_big_dist,setL_choosing <- set_choosing,setL_ur_move <- set_ur_move,setL_ur_curr_waypoint <- set_ur_curr_waypoint,setL_sys_state <- set_sys_state]]
							 [[setR_big_dist <- set_big_dist,setR_choosing <- set_choosing,setR_ur_move <- set_ur_move,setR_ur_curr_waypoint <- set_ur_curr_waypoint,setR_sys_state <- set_sys_state]]
							)\union(enteredSS,{terminate}) 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_UR_ur_n_waypoints) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
					
						Behaviour 	= dbisim(
							((
							 (((let
							 	-- IMPLEMENTATION NOTE:
							 	-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							 	-- modules for defining the semantics of each node.
							 	enterSS = {|
							 	i0::enter,
							 	moveP::enter,
							 	big_dist_check::enter,
							 	moveL::enter,
							 	f0::enter,
							 	j0::enter,
							 	j1::enter,
							 	moveL_with_t::enter,
							 	moveJ::enter,
							 	j2::enter,
							 	j3::enter,
							 	j4::enter
							 	|}
							 	hideSet = union(enterSS,{|exit,exited,internal__|})
							 within 
							 	((let
							 		-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							 		-- because CSPM modules are used for the semantics of Node.
							 		flowevts = union(enterSS,{|exit,exited,interrupt|})
							 		transSync = {|internal__.NID_j4,internal__.NID_j4,internal__.NID_big_dist_check,internal__.NID_j1,internal__.NID_j1,internal__.NID_j0,internal__.NID_j0,internal__.NID_j2,internal__.NID_j2,internal__.NID_moveL,internal__.NID_moveL_with_t,internal__.NID_moveP,internal__.NID_j3,internal__.NID_moveJ,internal__.NID_i0|}
							 	within
							 		((
							 		 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							 		   i0::VS_O__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   moveP::VS_O__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   big_dist_check::VS_O__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   moveL::VS_O__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   f0::VS_O__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   j0::VS_O__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   j1::VS_O__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   moveL_with_t::VS_O__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   moveJ::VS_O__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   j2::VS_O__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   j3::VS_O__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   [| { share__, terminate } |] (
							 		   j4::VS_O__(id__,
							 		   		    const_UR_ur_n_waypoints)
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		   )
							 		 )
							 		 [[moveP::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_moveP|}]]
							 		 [[big_dist_check::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_big_dist_check|}]]
							 		 [[moveL::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_moveL|}]]
							 		 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 		 [[moveL_with_t::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_moveL_with_t|}]]
							 		 [[moveJ::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_moveJ|}]]
							 		 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 		 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
							 		 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
							 		 [[j2::interrupt <- x__ | x__ <- {|internal__.NID_j2,internal__.NID_j2|}]]
							 		 [[j3::interrupt <- x__ | x__ <- {|internal__.NID_j3|}]]
							 		 [[j4::interrupt <- x__ | x__ <- {|internal__.NID_j4,internal__.NID_j4|}]]
							 		 )
							 		  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 		  [[set_big_dist <- setL_big_dist,set_ur_move <- setL_ur_move]]
							 		 )
							 		 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 		 			,setL_big_dist
							 		 			,setL_ur_move
							 		|}) |]
							 		 ((i0::enter -> Transitions(id__,
							 		 		    const_UR_ur_n_waypoints))
							 		  [[ share__ <- x__ | x__ <- {| share__,setL_big_dist,setL_ur_move |} ]]
							 		 )
							 		)[[setL_big_dist <- set_big_dist,setL_ur_move <- set_ur_move]]
							 		)
							 	)
							 	 \ hideSet)
							 	[[
							 		move__.x____ <- move,
							 		done__.x____ <- done,
							 		out_of_sync__.x____ <- out_of_sync
							 		| x____ <- NIDS
							 	]]
							 )
							 )
							  [[ share__ <- x__ | x__ <- {| share__,setR_big_dist,setR_choosing,setR_ur_move,setR_ur_curr_waypoint,setR_sys_state |} ]] 
							  [[set_big_dist <- setL_big_dist,set_choosing <- setL_choosing,set_ur_move <- setL_ur_move,set_ur_curr_waypoint <- setL_ur_curr_waypoint,set_sys_state <- setL_sys_state]]
							 )
							 [| union(union(enteredSS,{| interrupt, terminate |}),{|share__
							 			,setL_big_dist
							 			,setL_choosing
							 			,setL_ur_move
							 			,setL_ur_curr_waypoint
							 			,setL_sys_state
							 			,setR_big_dist
							 			 			,setR_choosing
							 			 			,setR_ur_move
							 			 			,setR_ur_curr_waypoint
							 			 			,setR_sys_state
							 			|}) |]
							 ((During)
							  [[ share__ <- x__ | x__ <- {| share__,setL_big_dist,setL_choosing,setL_ur_move,setL_ur_curr_waypoint,setL_sys_state |} ]]
							  [[set_big_dist <- setR_big_dist,set_choosing <- setR_choosing,set_ur_move <- setR_ur_move,set_ur_curr_waypoint <- setR_ur_curr_waypoint,set_sys_state <- setR_sys_state]]
							 )
							)[[setL_big_dist <- set_big_dist,setL_choosing <- set_choosing,setL_ur_move <- set_ur_move,setL_ur_curr_waypoint <- set_ur_curr_waypoint,setL_sys_state <- set_sys_state]]
							 [[setR_big_dist <- set_big_dist,setR_choosing <- set_choosing,setR_ur_move <- set_ur_move,setR_ur_curr_waypoint <- set_ur_curr_waypoint,setR_sys_state <- set_sys_state]]
							)\{terminate} 
						)
						During 		= share__choice(([] e__ : enteredSS @ e__ -> SKIP))
								 	  ; entered -> ((CRUN(enteredSS) ||| SKIP ; SStop) /\ interrupt -> share__choice(terminate -> SKIP))
					within
						Inactive [| {terminate} |> SKIP)
					
					Transitions(id__,
							    const_UR_ur_n_waypoints) = ((let
						Trans = share__choice(get_big_dist?big_dist -> get_ur_move?ur_move -> (
							((share__ -> SKIP
							 [] dbisim(((not (UR_move_blending(ur_move))))&(internal__!NID_j4 -> SKIP ;  ((SKIP ; big_dist_check::enter -> SKIP))))
							 	 [] dbisim((UR_move_blending(ur_move))&(internal__!NID_j4 -> SKIP ;  ((SKIP ; j0::enter -> SKIP))))
							 	 [] dbisim((true)&(internal__!NID_big_dist_check -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j1::enter -> SKIP)))
							 	 [] dbisim(((not (big_dist)))&(internal__!NID_j1 -> SKIP ;  ((SKIP ; moveL_with_t::enter -> SKIP))))
							 	 [] dbisim((big_dist)&(internal__!NID_j1 -> SKIP ;  ((SKIP ; moveL::enter -> SKIP))))
							 	 [] dbisim(((not (UR_move_large_offset(ur_move))))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; moveJ::enter -> SKIP))))
							 	 [] dbisim((UR_move_large_offset(ur_move))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; j2::enter -> SKIP))))
							 	 [] dbisim((UR_move_sharp_corner(ur_move))&(internal__!NID_j2 -> SKIP ;  ((SKIP ; moveL_with_t::enter -> SKIP))))
							 	 [] dbisim(((not (UR_move_sharp_corner(ur_move))))&(internal__!NID_j2 -> SKIP ;  ((SKIP ; moveP::enter -> SKIP))))
							 	 [] dbisim((true)&(internal__!NID_moveL -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
							 	 [] dbisim((true)&(internal__!NID_moveL_with_t -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j3::enter -> SKIP)))
							 	 [] dbisim((true)&(internal__!NID_moveP -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j3::enter -> SKIP)))
							 	 [] dbisim((true)&(internal__!NID_j3 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
							 	 [] dbisim((true)&(internal__!NID_moveJ -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
							 	 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(true & (share__choice(set_choosing!true -> SKIP))) ; j4::enter -> SKIP))))
							 ) ; Trans)
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
						)
						)
					within
						Trans
					)
					)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j1
				module j1
				exports
				
					channel enter, interrupt
					
					D__(id__,
							    const_UR_ur_n_waypoints) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_UR_ur_n_waypoints) = D__(id__,
							    const_UR_ur_n_waypoints)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				CALL__moveL(id__,
						    const_UR_ur_n_waypoints,
							param_jd1,
							param_jd2,
							param_time) 	= moveLCall.param_jd1.param_jd2.param_time -> SKIP
				CALL__moveP(id__,
						    const_UR_ur_n_waypoints,
							param_jd1,
							param_jd2,
							param_time) 	= movePCall.param_jd1.param_jd2.param_time -> SKIP
				CALL__moveJ(id__,
						    const_UR_ur_n_waypoints,
							param_jd1,
							param_jd2,
							param_time) 	= moveJCall.param_jd1.param_jd2.param_time -> SKIP
				CALL__moveL_with_t(id__,
						    const_UR_ur_n_waypoints,
							param_jd1,
							param_jd2,
							param_time) 	= moveL_with_tCall.param_jd1.param_jd2.param_time -> SKIP
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
						    const_UR_ur_n_waypoints) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__,
									    const_UR_ur_n_waypoints) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,
							    const_UR_ur_n_waypoints))
				)\sharedVarHide
				
				STM_VS_O(id__,
						    const_UR_ur_n_waypoints) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__,
									    const_UR_ur_n_waypoints) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,
							    const_UR_ur_n_waypoints))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__,
						    const_UR_ur_n_waypoints) = ((let
					Trans = share__choice(get_choosing?choosing -> get_ur_move?ur_move -> get_ur_curr_waypoint?ur_curr_waypoint -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; wait_for_move::enter -> SKIP))))
						 	 [] dbisim(((ur_curr_waypoint>=const_UR_ur_n_waypoints))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; reset_UR::enter -> SKIP))))
						 	 [] dbisim(((ur_curr_waypoint<const_UR_ur_n_waypoints))&(internal__!NID_j0 -> SKIP ;  ((share__choice(share__choice(get_ur_curr_waypoint?ur_curr_waypoint -> true & (share__choice(set_ur_curr_waypoint!Plus(ur_curr_waypoint, 1, core_nat) -> SKIP)))) ; wait_for_move::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_reset_UR -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; wait_for_move::enter -> SKIP)))
						 	 [] dbisim(((choosing==false))&(internal__!NID_choose_cmd -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
						 	 [] dbisim((true)&(move__!NID_wait_for_move.in?ur_move:{ur_move|ur_move <- UR_move, true} -> share__choice(set_ur_move!ur_move -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j1::enter -> SKIP)))
						 	 [] dbisim(((UR_move_goal_time(ur_move)<0))&(internal__!NID_j1 -> SKIP ;  ((true&(share__choice(out_of_sync.out -> SKIP)) ; f0::enter -> SKIP))))
						 	 [] dbisim(((UR_move_goal_time(ur_move)>=0))&(internal__!NID_j1 -> SKIP ;  ((SKIP ; choose_cmd::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
						    const_UR_ur_n_waypoints) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							wait_for_move::enter,
							reset_UR::enter,
							j0::enter,
							f0::enter,
							choose_cmd::enter,
							j1::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0,internal__.NID_reset_UR,internal__.NID_choose_cmd,move__.NID_wait_for_move.in,internal__.NID_j1,internal__.NID_j1|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__,
								   		    const_UR_ur_n_waypoints)
								   [| { share__, terminate } |] (
								   wait_for_move::D__(id__,
								   		    const_UR_ur_n_waypoints)
								   [| { share__, terminate } |] (
								   reset_UR::D__(id__,
								   		    const_UR_ur_n_waypoints)
								   [| { share__, terminate } |] (
								   j0::D__(id__,
								   		    const_UR_ur_n_waypoints)
								   [| { share__, terminate } |] (
								   f0::D__(id__,
								   		    const_UR_ur_n_waypoints)
								   [| { share__, terminate } |] (
								   choose_cmd::D__(id__,
								   		    const_UR_ur_n_waypoints)
								   [| { share__, terminate } |] (
								   j1::D__(id__,
								   		    const_UR_ur_n_waypoints)
								   )
								   )
								   )
								   )
								   )
								   )
								 )
								 [[wait_for_move::interrupt <- x__ | x__ <- {|interrupt,move__.NID_wait_for_move.in|}]]
								 [[reset_UR::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_reset_UR|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[choose_cmd::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_choose_cmd|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_ur_move |} ]] 
								  [[set_choosing <- setL_choosing,set_ur_move <- setL_ur_move,set_ur_curr_waypoint <- setL_ur_curr_waypoint]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_choosing
								 			,setL_ur_move
								 			,setL_ur_curr_waypoint
								 			,setR_ur_move
								 			|}) |]
								 ((i0::enter -> Transitions(id__,
								 		    const_UR_ur_n_waypoints))
								  [[ share__ <- x__ | x__ <- {| share__,setL_choosing,setL_ur_move,setL_ur_curr_waypoint |} ]]
								  [[set_ur_move <- setR_ur_move]]
								 )
								)[[setL_choosing <- set_choosing,setL_ur_move <- set_ur_move,setL_ur_curr_waypoint <- set_ur_curr_waypoint]]
								 [[setR_ur_move <- set_ur_move]]
								)
							)
							 \ hideSet)
							[[
								move__.x____ <- move,
								done__.x____ <- done,
								out_of_sync__.x____ <- out_of_sync
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
						    const_UR_ur_n_waypoints) = 
					dbisim((MachineBody(id__,
							    const_UR_ur_n_waypoints)\ enteredSS)
					)
				
				IteratedBehaviour(id__,
						    const_UR_ur_n_waypoints) = 
					dbisim((MachineBody(id__,
							    const_UR_ur_n_waypoints)\ enteredSS)
					)
				
				Stateful(id__,
						    const_UR_ur_n_waypoints) = 
					((
						(Behaviour(id__,
								    const_UR_ur_n_waypoints) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								    const_UR_ur_n_waypoints))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__,
						    const_UR_ur_n_waypoints) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													Behaviour(id__,
															    const_UR_ur_n_waypoints)
													[| {|get_choosing,set_choosing,terminate|} |]
													Memory_choosing(true)
												)\{|get_choosing,set_choosing|}
											)
											[| {|get_big_dist,set_big_dist,terminate|} |]
											Memory_big_dist(true)
										)\{|get_big_dist,set_big_dist|}
									)
									[| {|get_ur_move,set_ur_move,terminate|} |]
									Memory_ur_move((true,true,true,0,0,0))
								)\{|get_ur_move,set_ur_move|}
							)
							[| {|get_ur_curr_waypoint,set_ur_curr_waypoint,terminate|} |]
							Memory_ur_curr_waypoint(0)
						)\{|get_ur_curr_waypoint,set_ur_curr_waypoint|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
						    const_UR_ur_n_waypoints) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							wait_for_move::enter,
							reset_UR::enter,
							j0::enter,
							f0::enter,
							choose_cmd::enter,
							j1::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0,internal__.NID_reset_UR,internal__.NID_choose_cmd,move__.NID_wait_for_move.in,internal__.NID_j1,internal__.NID_j1|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__,
								   		    const_UR_ur_n_waypoints)
								   [| { share__, terminate } |] (
								   wait_for_move::VS_O__(id__,
								   		    const_UR_ur_n_waypoints)
								   [| { share__, terminate } |] (
								   reset_UR::VS_O__(id__,
								   		    const_UR_ur_n_waypoints)
								   [| { share__, terminate } |] (
								   j0::VS_O__(id__,
								   		    const_UR_ur_n_waypoints)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__,
								   		    const_UR_ur_n_waypoints)
								   [| { share__, terminate } |] (
								   choose_cmd::VS_O__(id__,
								   		    const_UR_ur_n_waypoints)
								   [| { share__, terminate } |] (
								   j1::VS_O__(id__,
								   		    const_UR_ur_n_waypoints)
								   )
								   )
								   )
								   )
								   )
								   )
								 )
								 [[wait_for_move::interrupt <- x__ | x__ <- {|interrupt,move__.NID_wait_for_move.in|}]]
								 [[reset_UR::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_reset_UR|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[choose_cmd::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_choose_cmd|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_ur_move |} ]] 
								  [[set_choosing <- setL_choosing,set_ur_move <- setL_ur_move,set_ur_curr_waypoint <- setL_ur_curr_waypoint]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_choosing
								 			,setL_ur_move
								 			,setL_ur_curr_waypoint
								 			,setR_ur_move
								 			|}) |]
								 ((i0::enter -> Transitions(id__,
								 		    const_UR_ur_n_waypoints))
								  [[ share__ <- x__ | x__ <- {| share__,setL_choosing,setL_ur_move,setL_ur_curr_waypoint |} ]]
								  [[set_ur_move <- setR_ur_move]]
								 )
								)[[setL_choosing <- set_choosing,setL_ur_move <- set_ur_move,setL_ur_curr_waypoint <- set_ur_curr_waypoint]]
								 [[setR_ur_move <- set_ur_move]]
								)
							)
							 \ hideSet)
							[[
								move__.x____ <- move,
								done__.x____ <- done,
								out_of_sync__.x____ <- out_of_sync
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
						    const_UR_ur_n_waypoints) = 
					dbisim((MachineBody_VS_O(id__,
							    const_UR_ur_n_waypoints))
					)
				
				IteratedBehaviour_VS_O(id__,
						    const_UR_ur_n_waypoints) = 
					dbisim((MachineBody_VS_O(id__,
							    const_UR_ur_n_waypoints))
					)
				
				Stateful_VS_O(id__,
						    const_UR_ur_n_waypoints) = 
					dbisim((
						(Behaviour_VS_O(id__,
								    const_UR_ur_n_waypoints) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								    const_UR_ur_n_waypoints))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__,
						    const_UR_ur_n_waypoints) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													Behaviour_VS_O(id__,
															    const_UR_ur_n_waypoints)
													[| {|get_choosing,set_choosing,terminate|} |]
													Memory_choosing(true)
												)\{|get_choosing,set_choosing|}
											)
											[| {|get_big_dist,set_big_dist,terminate|} |]
											Memory_big_dist(true)
										)\{|get_big_dist,set_big_dist|}
									)
									[| {|get_ur_move,set_ur_move,terminate|} |]
									Memory_ur_move((true,true,true,0,0,0))
								)\{|get_ur_move,set_ur_move|}
							)
							[| {|get_ur_curr_waypoint,set_ur_curr_waypoint,terminate|} |]
							Memory_ur_curr_waypoint(0)
						)\{|get_ur_curr_waypoint,set_ur_curr_waypoint|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_ur_curr_waypoint(ur_curr_waypoint) =
					get_ur_curr_waypoint!ur_curr_waypoint -> Memory_ur_curr_waypoint(ur_curr_waypoint)
					[]
					set_ur_curr_waypoint?x__ -> Memory_ur_curr_waypoint(x__)
					[]
					terminate -> SKIP
				Memory_ur_move(ur_move) =
					get_ur_move!ur_move -> Memory_ur_move(ur_move)
					[]
					set_ur_move?x__ -> Memory_ur_move(x__)
					[]
					terminate -> SKIP
				Memory_big_dist(big_dist) =
					get_big_dist!big_dist -> Memory_big_dist(big_dist)
					[]
					set_big_dist?x__ -> Memory_big_dist(x__)
					[]
					terminate -> SKIP
				Memory_choosing(choosing) =
					get_choosing!choosing -> Memory_choosing(choosing)
					[]
					set_choosing?x__ -> Memory_choosing(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__,
						    const_UR_ur_n_waypoints) = Memory_ur_curr_waypoint(0)
				[| { terminate } |] (
				Memory_ur_move((true,true,true,0,0,0))
				[| { terminate } |] (
				Memory_big_dist(true)
				[| { terminate } |] (
				Memory_choosing(true)
				)
				)
				)
				
				getsetLocalChannels = {|get_ur_curr_waypoint,set_ur_curr_waypoint,get_ur_move,set_ur_move,get_big_dist,set_big_dist,get_choosing,set_choosing|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
						    const_UR_ur_n_waypoints) = STM_VS_O(id__,
						    const_UR_ur_n_waypoints)
				
				D__(id__,
						    const_UR_ur_n_waypoints) = STM(id__,
						    const_UR_ur_n_waypoints) \ internal_events
				O__(id__,
						    const_UR_ur_n_waypoints) = sbisim(diamond(D__(id__,
						    const_UR_ur_n_waypoints)))
				VS__(id__,
						    const_UR_ur_n_waypoints) = FVS__(id__,
						    const_UR_ur_n_waypoints)
				VS_O__(id__,
						    const_UR_ur_n_waypoints) = sbisim(diamond(FVS__(id__,
						    const_UR_ur_n_waypoints)))
				HEXT__(id__,
						    const_UR_ur_n_waypoints) = O__(id__,
						    const_UR_ur_n_waypoints) [|shared_variable_events|] SKIP
				HUP__(id__,
						    const_UR_ur_n_waypoints) = O__(id__,
						    const_UR_ur_n_waypoints) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				Memory_sys_state(sys_state) =
					get_sys_state!sys_state -> Memory_sys_state(sys_state)
					[]
					set_sys_state?x__ -> Memory_sys_state(x__)
					[]
					set_EXT_sys_state?x__ -> Memory_sys_state(x__)
					[]
					terminate -> SKIP
				
				-- sharedVarMemory process
				sharedVarMemory(id__,
						    const_UR_ur_n_waypoints) = Memory_sys_state(SystemState_wait_for_start)
				
				sharedVarSync = {|get_sys_state,set_sys_state,set_EXT_sys_state|}
				
				sharedVarHide = {|get_sys_state|}
			endmodule
			module stm_ref2
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_wait_for_move|
				              NID_by_position|
				              NID_reset_EXAX|
				              NID_f0|
				              NID_j0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_curr_waypoint, set_curr_waypoint, setL_curr_waypoint, setR_curr_waypoint: core_nat
				channel get_exax_move, set_exax_move, setL_exax_move, setR_exax_move: EXAX_move
				channel get_sys_state, set_sys_state, setL_sys_state, setR_sys_state: SystemState
				
				-- Shared variable channels
				channel set_EXT_sys_state: SystemState
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel move__: NIDS.InOut.EXAX_move
				channel move: InOut.EXAX_move
				channel done__: NIDS.InOut
				channel done: InOut
				channel out_of_sync__: NIDS.InOut
				channel out_of_sync: InOut
				
				-- Declaring call and ret events for undefined operations
				channel go_to_posCall: core_real.core_int
				
				enterSS = {|
				i0::enter,
				wait_for_move::enter,
				by_position::enter,
				reset_EXAX::enter,
				f0::enter,
				j0::enter
				|}
				
				enteredSS = 	{|
				wait_for_move::entered,
				by_position::entered,
				reset_EXAX::entered,
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_sys_state
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_sys_state, set_sys_state
				,	move,
					done,
					out_of_sync
				,	go_to_posCall
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__,
							    const_EXAX_n_waypoints) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
							    const_EXAX_n_waypoints) = D__(id__,
							    const_EXAX_n_waypoints)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: wait_for_move
				module wait_for_move
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
							    const_EXAX_n_waypoints) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_EXAX_n_waypoints) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: by_position
				module by_position
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
							    const_EXAX_n_waypoints) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(get_exax_move?exax_move -> true&CALL__go_to_pos(
									id__,
								    const_EXAX_n_waypoints,
									EXAX_move_dist(exax_move),
									EXAX_move_time(exax_move)
								)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_EXAX_n_waypoints) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(get_exax_move?exax_move -> true&CALL__go_to_pos(
									id__,
								    const_EXAX_n_waypoints,
									EXAX_move_dist(exax_move),
									EXAX_move_time(exax_move)
								)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: reset_EXAX
				module reset_EXAX
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
							    const_EXAX_n_waypoints) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_curr_waypoint!0 -> SKIP)));true&(share__choice(done.out -> SKIP)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_EXAX_n_waypoints) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(true & (share__choice(set_curr_waypoint!0 -> SKIP)));true&(share__choice(done.out -> SKIP)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
							    const_EXAX_n_waypoints) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_EXAX_n_waypoints) = D__(id__,
							    const_EXAX_n_waypoints)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					D__(id__,
							    const_EXAX_n_waypoints) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
							    const_EXAX_n_waypoints) = D__(id__,
							    const_EXAX_n_waypoints)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				CALL__go_to_pos(id__,
						    const_EXAX_n_waypoints,
							param_dist,
							param_time_budget) 	= go_to_posCall.param_dist.param_time_budget -> SKIP
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
						    const_EXAX_n_waypoints) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__,
									    const_EXAX_n_waypoints) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,
							    const_EXAX_n_waypoints))
				)\sharedVarHide
				
				STM_VS_O(id__,
						    const_EXAX_n_waypoints) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__,
									    const_EXAX_n_waypoints) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__,
							    const_EXAX_n_waypoints))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__,
						    const_EXAX_n_waypoints) = ((let
					Trans = share__choice(get_exax_move?exax_move -> get_curr_waypoint?curr_waypoint -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; wait_for_move::enter -> SKIP))))
						 	 [] dbisim(((curr_waypoint<const_EXAX_n_waypoints))&(internal__!NID_by_position -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_curr_waypoint?curr_waypoint -> true & (share__choice(set_curr_waypoint!Plus(curr_waypoint, 1, core_nat) -> SKIP)))) ; wait_for_move::enter -> SKIP)))
						 	 [] dbisim(((curr_waypoint>=const_EXAX_n_waypoints))&(internal__!NID_by_position -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; reset_EXAX::enter -> SKIP)))
						 	 [] dbisim((true)&(internal__!NID_reset_EXAX -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; wait_for_move::enter -> SKIP)))
						 	 [] dbisim((true)&(move__!NID_wait_for_move.in?exax_move:{exax_move|exax_move <- EXAX_move, true} -> share__choice(set_exax_move!exax_move -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
						 	 [] dbisim(((EXAX_move_time(exax_move)<0))&(internal__!NID_j0 -> SKIP ;  ((true&(share__choice(out_of_sync.out -> SKIP)) ; f0::enter -> SKIP))))
						 	 [] dbisim(((EXAX_move_time(exax_move)>=0))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; by_position::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
						    const_EXAX_n_waypoints) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							wait_for_move::enter,
							by_position::enter,
							reset_EXAX::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_by_position,internal__.NID_by_position,internal__.NID_reset_EXAX,move__.NID_wait_for_move.in,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__,
								   		    const_EXAX_n_waypoints)
								   [| { share__, terminate } |] (
								   wait_for_move::D__(id__,
								   		    const_EXAX_n_waypoints)
								   [| { share__, terminate } |] (
								   by_position::D__(id__,
								   		    const_EXAX_n_waypoints)
								   [| { share__, terminate } |] (
								   reset_EXAX::D__(id__,
								   		    const_EXAX_n_waypoints)
								   [| { share__, terminate } |] (
								   f0::D__(id__,
								   		    const_EXAX_n_waypoints)
								   [| { share__, terminate } |] (
								   j0::D__(id__,
								   		    const_EXAX_n_waypoints)
								   )
								   )
								   )
								   )
								   )
								 )
								 [[wait_for_move::interrupt <- x__ | x__ <- {|interrupt,move__.NID_wait_for_move.in|}]]
								 [[by_position::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_by_position,internal__.NID_by_position|}]]
								 [[reset_EXAX::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_reset_EXAX|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_exax_move |} ]] 
								  [[set_exax_move <- setL_exax_move,set_curr_waypoint <- setL_curr_waypoint]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_exax_move
								 			,setL_curr_waypoint
								 			,setR_exax_move
								 			|}) |]
								 ((i0::enter -> Transitions(id__,
								 		    const_EXAX_n_waypoints))
								  [[ share__ <- x__ | x__ <- {| share__,setL_exax_move,setL_curr_waypoint |} ]]
								  [[set_exax_move <- setR_exax_move]]
								 )
								)[[setL_exax_move <- set_exax_move,setL_curr_waypoint <- set_curr_waypoint]]
								 [[setR_exax_move <- set_exax_move]]
								)
							)
							 \ hideSet)
							[[
								move__.x____ <- move,
								done__.x____ <- done,
								out_of_sync__.x____ <- out_of_sync
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
						    const_EXAX_n_waypoints) = 
					dbisim((MachineBody(id__,
							    const_EXAX_n_waypoints)\ enteredSS)
					)
				
				IteratedBehaviour(id__,
						    const_EXAX_n_waypoints) = 
					dbisim((MachineBody(id__,
							    const_EXAX_n_waypoints)\ enteredSS)
					)
				
				Stateful(id__,
						    const_EXAX_n_waypoints) = 
					((
						(Behaviour(id__,
								    const_EXAX_n_waypoints) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								    const_EXAX_n_waypoints))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__,
						    const_EXAX_n_waypoints) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									Behaviour(id__,
											    const_EXAX_n_waypoints)
									[| {|get_exax_move,set_exax_move,terminate|} |]
									Memory_exax_move((0,0))
								)\{|get_exax_move,set_exax_move|}
							)
							[| {|get_curr_waypoint,set_curr_waypoint,terminate|} |]
							Memory_curr_waypoint(0)
						)\{|get_curr_waypoint,set_curr_waypoint|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
						    const_EXAX_n_waypoints) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							wait_for_move::enter,
							by_position::enter,
							reset_EXAX::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_by_position,internal__.NID_by_position,internal__.NID_reset_EXAX,move__.NID_wait_for_move.in,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__,
								   		    const_EXAX_n_waypoints)
								   [| { share__, terminate } |] (
								   wait_for_move::VS_O__(id__,
								   		    const_EXAX_n_waypoints)
								   [| { share__, terminate } |] (
								   by_position::VS_O__(id__,
								   		    const_EXAX_n_waypoints)
								   [| { share__, terminate } |] (
								   reset_EXAX::VS_O__(id__,
								   		    const_EXAX_n_waypoints)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__,
								   		    const_EXAX_n_waypoints)
								   [| { share__, terminate } |] (
								   j0::VS_O__(id__,
								   		    const_EXAX_n_waypoints)
								   )
								   )
								   )
								   )
								   )
								 )
								 [[wait_for_move::interrupt <- x__ | x__ <- {|interrupt,move__.NID_wait_for_move.in|}]]
								 [[by_position::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_by_position,internal__.NID_by_position|}]]
								 [[reset_EXAX::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_reset_EXAX|}]]
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_exax_move |} ]] 
								  [[set_exax_move <- setL_exax_move,set_curr_waypoint <- setL_curr_waypoint]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_exax_move
								 			,setL_curr_waypoint
								 			,setR_exax_move
								 			|}) |]
								 ((i0::enter -> Transitions(id__,
								 		    const_EXAX_n_waypoints))
								  [[ share__ <- x__ | x__ <- {| share__,setL_exax_move,setL_curr_waypoint |} ]]
								  [[set_exax_move <- setR_exax_move]]
								 )
								)[[setL_exax_move <- set_exax_move,setL_curr_waypoint <- set_curr_waypoint]]
								 [[setR_exax_move <- set_exax_move]]
								)
							)
							 \ hideSet)
							[[
								move__.x____ <- move,
								done__.x____ <- done,
								out_of_sync__.x____ <- out_of_sync
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
						    const_EXAX_n_waypoints) = 
					dbisim((MachineBody_VS_O(id__,
							    const_EXAX_n_waypoints))
					)
				
				IteratedBehaviour_VS_O(id__,
						    const_EXAX_n_waypoints) = 
					dbisim((MachineBody_VS_O(id__,
							    const_EXAX_n_waypoints))
					)
				
				Stateful_VS_O(id__,
						    const_EXAX_n_waypoints) = 
					dbisim((
						(Behaviour_VS_O(id__,
								    const_EXAX_n_waypoints) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								    const_EXAX_n_waypoints))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__,
						    const_EXAX_n_waypoints) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									Behaviour_VS_O(id__,
											    const_EXAX_n_waypoints)
									[| {|get_exax_move,set_exax_move,terminate|} |]
									Memory_exax_move((0,0))
								)\{|get_exax_move,set_exax_move|}
							)
							[| {|get_curr_waypoint,set_curr_waypoint,terminate|} |]
							Memory_curr_waypoint(0)
						)\{|get_curr_waypoint,set_curr_waypoint|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_curr_waypoint(curr_waypoint) =
					get_curr_waypoint!curr_waypoint -> Memory_curr_waypoint(curr_waypoint)
					[]
					set_curr_waypoint?x__ -> Memory_curr_waypoint(x__)
					[]
					terminate -> SKIP
				Memory_exax_move(exax_move) =
					get_exax_move!exax_move -> Memory_exax_move(exax_move)
					[]
					set_exax_move?x__ -> Memory_exax_move(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__,
						    const_EXAX_n_waypoints) = Memory_curr_waypoint(0)
				[| { terminate } |] (
				Memory_exax_move((0,0))
				)
				
				getsetLocalChannels = {|get_curr_waypoint,set_curr_waypoint,get_exax_move,set_exax_move|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
						    const_EXAX_n_waypoints) = STM_VS_O(id__,
						    const_EXAX_n_waypoints)
				
				D__(id__,
						    const_EXAX_n_waypoints) = STM(id__,
						    const_EXAX_n_waypoints) \ internal_events
				O__(id__,
						    const_EXAX_n_waypoints) = sbisim(diamond(D__(id__,
						    const_EXAX_n_waypoints)))
				VS__(id__,
						    const_EXAX_n_waypoints) = FVS__(id__,
						    const_EXAX_n_waypoints)
				VS_O__(id__,
						    const_EXAX_n_waypoints) = sbisim(diamond(FVS__(id__,
						    const_EXAX_n_waypoints)))
				HEXT__(id__,
						    const_EXAX_n_waypoints) = O__(id__,
						    const_EXAX_n_waypoints) [|shared_variable_events|] SKIP
				HUP__(id__,
						    const_EXAX_n_waypoints) = O__(id__,
						    const_EXAX_n_waypoints) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				Memory_sys_state(sys_state) =
					get_sys_state!sys_state -> Memory_sys_state(sys_state)
					[]
					set_sys_state?x__ -> Memory_sys_state(x__)
					[]
					set_EXT_sys_state?x__ -> Memory_sys_state(x__)
					[]
					terminate -> SKIP
				
				-- sharedVarMemory process
				sharedVarMemory(id__,
						    const_EXAX_n_waypoints) = Memory_sys_state(SystemState_wait_for_start)
				
				sharedVarSync = {|get_sys_state,set_sys_state,set_EXT_sys_state|}
				
				sharedVarHide = {|get_sys_state|}
			endmodule
			module stm_ref4
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_in_sync|
				              NID_out_of_sync|
				              NID_i0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel EXAX_out_of_sync__: NIDS.InOut
				channel EXAX_out_of_sync: InOut
				channel UR_out_of_sync__: NIDS.InOut
				channel UR_out_of_sync: InOut
				channel system_out_of_sync__: NIDS.InOut
				channel system_out_of_sync: InOut
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				in_sync::enter,
				out_of_sync::enter,
				i0::enter
				|}
				
				enteredSS = 	{|
				in_sync::entered,
				out_of_sync::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	EXAX_out_of_sync,
					UR_out_of_sync,
					system_out_of_sync
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- State: in_sync
				module in_sync
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: out_of_sync
				module out_of_sync
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(system_out_of_sync.out -> SKIP)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(system_out_of_sync.out -> SKIP)) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; in_sync::enter -> SKIP))))
						 	 [] dbisim((true)&(EXAX_out_of_sync__!NID_in_sync.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; out_of_sync::enter -> SKIP)))
						 	 [] dbisim((true)&(UR_out_of_sync__!NID_in_sync.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; out_of_sync::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							in_sync::enter,
							out_of_sync::enter,
							i0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,EXAX_out_of_sync__.NID_in_sync.in,UR_out_of_sync__.NID_in_sync.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   in_sync::D__(id__)
								   [| { share__, terminate } |] (
								   out_of_sync::D__(id__)
								   [| { share__, terminate } |] (
								   i0::D__(id__)
								   )
								   )
								 )
								 [[in_sync::interrupt <- x__ | x__ <- {|interrupt,EXAX_out_of_sync__.NID_in_sync.in,UR_out_of_sync__.NID_in_sync.in|}]]
								 [[out_of_sync::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								EXAX_out_of_sync__.x____ <- EXAX_out_of_sync,
								UR_out_of_sync__.x____ <- UR_out_of_sync,
								system_out_of_sync__.x____ <- system_out_of_sync
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(Behaviour(id__))
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							in_sync::enter,
							out_of_sync::enter,
							i0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,EXAX_out_of_sync__.NID_in_sync.in,UR_out_of_sync__.NID_in_sync.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   in_sync::VS_O__(id__)
								   [| { share__, terminate } |] (
								   out_of_sync::VS_O__(id__)
								   [| { share__, terminate } |] (
								   i0::VS_O__(id__)
								   )
								   )
								 )
								 [[in_sync::interrupt <- x__ | x__ <- {|interrupt,EXAX_out_of_sync__.NID_in_sync.in,UR_out_of_sync__.NID_in_sync.in|}]]
								 [[out_of_sync::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								EXAX_out_of_sync__.x____ <- EXAX_out_of_sync,
								UR_out_of_sync__.x____ <- UR_out_of_sync,
								system_out_of_sync__.x____ <- system_out_of_sync
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(Behaviour_VS_O(id__))
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			module stm_ref3
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_checker
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_exax_move, set_exax_move, setL_exax_move, setR_exax_move: EXAX_move
				channel get_ur_move, set_ur_move, setL_ur_move, setR_ur_move: UR_move
				channel get_sys_state, set_sys_state, setL_sys_state, setR_sys_state: SystemState
				
				-- Shared variable channels
				channel set_EXT_sys_state: SystemState
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel exax_move_in__: NIDS.InOut.EXAX_move
				channel exax_move_in: InOut.EXAX_move
				channel ur_move_in__: NIDS.InOut.UR_move
				channel ur_move_in: InOut.UR_move
				channel ur_move_out__: NIDS.InOut.UR_move
				channel ur_move_out: InOut.UR_move
				channel exax_move_out__: NIDS.InOut.EXAX_move
				channel exax_move_out: InOut.EXAX_move
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				checker::enter
				|}
				
				enteredSS = 	{|
				checker::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_sys_state
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_sys_state, set_sys_state
				,	exax_move_in,
					ur_move_in,
					ur_move_out,
					exax_move_out
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: checker
				module checker
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = share__choice(get_sys_state?sys_state -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; checker::enter -> SKIP))))
						 	 [] dbisim((exax_move_in__!NID_checker.in?exax_move:{exax_move|exax_move <- EXAX_move, (((sys_state==SystemState_working)) or ((sys_state==SystemState_UR_finished)))} -> share__choice(set_exax_move!exax_move -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_exax_move?exax_move -> true&(share__choice(exax_move_out.out!exax_move -> SKIP))) ; checker::enter -> SKIP)))
						 	 [] dbisim((ur_move_in__!NID_checker.in?ur_move:{ur_move|ur_move <- UR_move, (((sys_state==SystemState_working)) or ((sys_state==SystemState_EXAX_finished)))} -> share__choice(set_ur_move!ur_move -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(get_ur_move?ur_move -> true&(share__choice(ur_move_out.out!ur_move -> SKIP))) ; checker::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							checker::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,exax_move_in__.NID_checker.in,ur_move_in__.NID_checker.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   checker::D__(id__)
								   )
								 )
								 [[checker::interrupt <- x__ | x__ <- {|interrupt,exax_move_in__.NID_checker.in,ur_move_in__.NID_checker.in|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_ur_move,setR_exax_move |} ]] 
								  [[set_sys_state <- setL_sys_state]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_sys_state
								 			,setR_ur_move
								 			 			,setR_exax_move
								 			|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_sys_state |} ]]
								  [[set_ur_move <- setR_ur_move,set_exax_move <- setR_exax_move]]
								 )
								)[[setL_sys_state <- set_sys_state]]
								 [[setR_ur_move <- set_ur_move,setR_exax_move <- set_exax_move]]
								)
							)
							 \ hideSet)
							[[
								exax_move_in__.x____ <- exax_move_in,
								ur_move_in__.x____ <- ur_move_in,
								ur_move_out__.x____ <- ur_move_out,
								exax_move_out__.x____ <- exax_move_out
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									Behaviour(id__)
									[| {|get_ur_move,set_ur_move,terminate|} |]
									Memory_ur_move((true,true,true,0,0,0))
								)\{|get_ur_move,set_ur_move|}
							)
							[| {|get_exax_move,set_exax_move,terminate|} |]
							Memory_exax_move((0,0))
						)\{|get_exax_move,set_exax_move|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							checker::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,exax_move_in__.NID_checker.in,ur_move_in__.NID_checker.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   checker::VS_O__(id__)
								   )
								 )
								 [[checker::interrupt <- x__ | x__ <- {|interrupt,exax_move_in__.NID_checker.in,ur_move_in__.NID_checker.in|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__,setR_ur_move,setR_exax_move |} ]] 
								  [[set_sys_state <- setL_sys_state]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_sys_state
								 			,setR_ur_move
								 			 			,setR_exax_move
								 			|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_sys_state |} ]]
								  [[set_ur_move <- setR_ur_move,set_exax_move <- setR_exax_move]]
								 )
								)[[setL_sys_state <- set_sys_state]]
								 [[setR_ur_move <- set_ur_move,setR_exax_move <- set_exax_move]]
								)
							)
							 \ hideSet)
							[[
								exax_move_in__.x____ <- exax_move_in,
								ur_move_in__.x____ <- ur_move_in,
								ur_move_out__.x____ <- ur_move_out,
								exax_move_out__.x____ <- exax_move_out
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									Behaviour_VS_O(id__)
									[| {|get_ur_move,set_ur_move,terminate|} |]
									Memory_ur_move((true,true,true,0,0,0))
								)\{|get_ur_move,set_ur_move|}
							)
							[| {|get_exax_move,set_exax_move,terminate|} |]
							Memory_exax_move((0,0))
						)\{|get_exax_move,set_exax_move|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_exax_move(exax_move) =
					get_exax_move!exax_move -> Memory_exax_move(exax_move)
					[]
					set_exax_move?x__ -> Memory_exax_move(x__)
					[]
					terminate -> SKIP
				Memory_ur_move(ur_move) =
					get_ur_move!ur_move -> Memory_ur_move(ur_move)
					[]
					set_ur_move?x__ -> Memory_ur_move(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_exax_move((0,0))
				[| { terminate } |] (
				Memory_ur_move((true,true,true,0,0,0))
				)
				
				getsetLocalChannels = {|get_exax_move,set_exax_move,get_ur_move,set_ur_move|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				Memory_sys_state(sys_state) =
					get_sys_state!sys_state -> Memory_sys_state(sys_state)
					[]
					set_sys_state?x__ -> Memory_sys_state(x__)
					[]
					set_EXT_sys_state?x__ -> Memory_sys_state(x__)
					[]
					terminate -> SKIP
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = Memory_sys_state(SystemState_wait_for_start)
				
				sharedVarSync = {|get_sys_state,set_sys_state,set_EXT_sys_state|}
				
				sharedVarHide = {|get_sys_state|}
			endmodule
			
				-- undefined operations
				CALL__moveL(id__,
						    param_jd1,
						    param_jd2,
						    param_time) 	= moveLCall.param_jd1.param_jd2.param_time -> SKIP
				CALL__moveP(id__,
						    param_jd1,
						    param_jd2,
						    param_time) 	= movePCall.param_jd1.param_jd2.param_time -> SKIP
				CALL__go_to_pos(id__,
						    param_dist,
						    param_time_budget) 	= go_to_posCall.param_dist.param_time_budget -> SKIP
				CALL__moveJ(id__,
						    param_jd1,
						    param_jd2,
						    param_time) 	= moveJCall.param_jd1.param_jd2.param_time -> SKIP
				CALL__moveL_with_t(id__,
						    param_jd1,
						    param_jd2,
						    param_time) 	= moveL_with_tCall.param_jd1.param_jd2.param_time -> SKIP
				
				-- declaring controller memory
				Memory(id__, sys_state) = (
				set_EXT_sys_state?x__ -> stm_ref0::set_EXT_sys_state!x__ -> stm_ref1::set_EXT_sys_state!x__ -> stm_ref2::set_EXT_sys_state!x__ -> stm_ref3::set_EXT_sys_state!x__ -> 
				Memory(id__,x__)
				)
				
				D__(id__,
						    const_main_Controller_stm_ref1_ur_n_waypoints,
						    const_main_Controller_stm_ref2_n_waypoints) = 	((
						(
							stm_ref0::D__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::start_system <- start_system,
								stm_ref0::UR_done.in <- stm_ref1::done.out,
								stm_ref0::UR_done.out <- stm_ref1::done.in,
								stm_ref0::EXAX_done.in <- stm_ref2::done.out,
								stm_ref0::EXAX_done.out <- stm_ref2::done.in,
								stm_ref0::out_of_sync.in <- stm_ref4::system_out_of_sync.out,
								stm_ref0::out_of_sync.out <- stm_ref4::system_out_of_sync.in,
								stm_ref0::set_sys_state <- set_sys_state,
								stm_ref0::get_sys_state <- get_sys_state
							]]
						)
							[|{|terminate, stm_ref1::done, stm_ref2::done, stm_ref4::system_out_of_sync|}|]
						(
							(
								let
									const_UR_ur_n_waypoints = 3
								within 
								stm_ref1::D__(id__,
										    const_UR_ur_n_waypoints)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::move.in <- stm_ref3::ur_move_out.out,
									stm_ref1::move.out <- stm_ref3::ur_move_out.in,
									stm_ref1::set_sys_state <- set_sys_state,
									stm_ref1::get_sys_state <- get_sys_state,
									stm_ref1::moveLCall <- moveLCall,
									stm_ref1::movePCall <- movePCall,
									stm_ref1::moveJCall <- moveJCall,
									stm_ref1::moveL_with_tCall <- moveL_with_tCall
								]]
							)
								[|{|terminate, stm_ref1::out_of_sync, stm_ref3::ur_move_out|}|]
							(
								(
									let
										const_EXAX_n_waypoints = 1
									within 
									stm_ref2::D__(id__,
											    const_EXAX_n_waypoints)[[
										stm_ref2::terminate <- terminate,
										stm_ref2::move.in <- stm_ref3::exax_move_out.out,
										stm_ref2::move.out <- stm_ref3::exax_move_out.in,
										stm_ref2::set_sys_state <- set_sys_state,
										stm_ref2::get_sys_state <- get_sys_state,
										stm_ref2::go_to_posCall <- go_to_posCall
									]]
								)
									[|{|terminate, stm_ref2::out_of_sync, stm_ref3::exax_move_out|}|]
								(
									(
										stm_ref4::D__(id__)[[
											stm_ref4::terminate <- terminate,
											stm_ref4::UR_out_of_sync.in <- stm_ref1::out_of_sync.out,
											stm_ref4::UR_out_of_sync.out <- stm_ref1::out_of_sync.in,
											stm_ref4::EXAX_out_of_sync.in <- stm_ref2::out_of_sync.out,
											stm_ref4::EXAX_out_of_sync.out <- stm_ref2::out_of_sync.in
										]]
									)
										[|{|terminate|}|]
									(
										stm_ref3::D__(id__)[[
											stm_ref3::terminate <- terminate,
											stm_ref3::ur_move_in <- next_UR_move,
											stm_ref3::exax_move_in <- next_EXAX_move,
											stm_ref3::set_sys_state <- set_sys_state,
											stm_ref3::get_sys_state <- get_sys_state
										]]
									)
								)
								\diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\diff(
								{|terminate, stm_ref2::out_of_sync, stm_ref3::exax_move_out|},
								{|terminate|}
							)
						)
						\diff(
							{|terminate, stm_ref1::out_of_sync, stm_ref3::ur_move_out|},
							{|terminate|}
						)
					)
					\diff(
						{|terminate, stm_ref1::done, stm_ref2::done, stm_ref4::system_out_of_sync|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_sys_state,
									stm_ref1::set_EXT_sys_state,
									stm_ref2::set_EXT_sys_state,
									stm_ref3::set_EXT_sys_state
								|}
							)
						|]
					Memory(id__, SystemState_wait_for_start)
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_sys_state,
						stm_ref1::set_EXT_sys_state,
						stm_ref2::set_EXT_sys_state,
						stm_ref3::set_EXT_sys_state
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__,
						    const_main_Controller_stm_ref1_ur_n_waypoints,
						    const_main_Controller_stm_ref2_n_waypoints) = 	((
						(
							stm_ref0::VS__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::start_system <- start_system,
								stm_ref0::UR_done.in <- stm_ref1::done.out,
								stm_ref0::UR_done.out <- stm_ref1::done.in,
								stm_ref0::EXAX_done.in <- stm_ref2::done.out,
								stm_ref0::EXAX_done.out <- stm_ref2::done.in,
								stm_ref0::out_of_sync.in <- stm_ref4::system_out_of_sync.out,
								stm_ref0::out_of_sync.out <- stm_ref4::system_out_of_sync.in,
								stm_ref0::set_sys_state <- set_sys_state,
								stm_ref0::get_sys_state <- get_sys_state
							]]
						)
							[|{|terminate, stm_ref1::done, stm_ref2::done, stm_ref4::system_out_of_sync|}|]
						(
							(
								let
									const_UR_ur_n_waypoints = 3
								within 
								stm_ref1::VS__(id__,
										    const_UR_ur_n_waypoints)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::move.in <- stm_ref3::ur_move_out.out,
									stm_ref1::move.out <- stm_ref3::ur_move_out.in,
									stm_ref1::set_sys_state <- set_sys_state,
									stm_ref1::get_sys_state <- get_sys_state,
									stm_ref1::moveLCall <- moveLCall,
									stm_ref1::movePCall <- movePCall,
									stm_ref1::moveJCall <- moveJCall,
									stm_ref1::moveL_with_tCall <- moveL_with_tCall
								]]
							)
								[|{|terminate, stm_ref1::out_of_sync, stm_ref3::ur_move_out|}|]
							(
								(
									let
										const_EXAX_n_waypoints = 1
									within 
									stm_ref2::VS__(id__,
											    const_EXAX_n_waypoints)[[
										stm_ref2::terminate <- terminate,
										stm_ref2::move.in <- stm_ref3::exax_move_out.out,
										stm_ref2::move.out <- stm_ref3::exax_move_out.in,
										stm_ref2::set_sys_state <- set_sys_state,
										stm_ref2::get_sys_state <- get_sys_state,
										stm_ref2::go_to_posCall <- go_to_posCall
									]]
								)
									[|{|terminate, stm_ref2::out_of_sync, stm_ref3::exax_move_out|}|]
								(
									(
										stm_ref4::VS__(id__)[[
											stm_ref4::terminate <- terminate,
											stm_ref4::UR_out_of_sync.in <- stm_ref1::out_of_sync.out,
											stm_ref4::UR_out_of_sync.out <- stm_ref1::out_of_sync.in,
											stm_ref4::EXAX_out_of_sync.in <- stm_ref2::out_of_sync.out,
											stm_ref4::EXAX_out_of_sync.out <- stm_ref2::out_of_sync.in
										]]
									)
										[|{|terminate|}|]
									(
										stm_ref3::VS__(id__)[[
											stm_ref3::terminate <- terminate,
											stm_ref3::ur_move_in <- next_UR_move,
											stm_ref3::exax_move_in <- next_EXAX_move,
											stm_ref3::set_sys_state <- set_sys_state,
											stm_ref3::get_sys_state <- get_sys_state
										]]
									)
								)
								\diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\diff(
								{|terminate, stm_ref2::out_of_sync, stm_ref3::exax_move_out|},
								{|terminate|}
							)
						)
						\diff(
							{|terminate, stm_ref1::out_of_sync, stm_ref3::ur_move_out|},
							{|terminate|}
						)
					)
					\diff(
						{|terminate, stm_ref1::done, stm_ref2::done, stm_ref4::system_out_of_sync|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_sys_state,
									stm_ref1::set_EXT_sys_state,
									stm_ref2::set_EXT_sys_state,
									stm_ref3::set_EXT_sys_state
								|}
							)
						|]
					Memory(id__, SystemState_wait_for_start)
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_sys_state,
						stm_ref1::set_EXT_sys_state,
						stm_ref2::set_EXT_sys_state,
						stm_ref3::set_EXT_sys_state
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__,
						    const_main_Controller_stm_ref1_ur_n_waypoints,
						    const_main_Controller_stm_ref2_n_waypoints) = sbisim(diamond(	((
						(
							stm_ref0::O__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::start_system <- start_system,
								stm_ref0::UR_done.in <- stm_ref1::done.out,
								stm_ref0::UR_done.out <- stm_ref1::done.in,
								stm_ref0::EXAX_done.in <- stm_ref2::done.out,
								stm_ref0::EXAX_done.out <- stm_ref2::done.in,
								stm_ref0::out_of_sync.in <- stm_ref4::system_out_of_sync.out,
								stm_ref0::out_of_sync.out <- stm_ref4::system_out_of_sync.in,
								stm_ref0::set_sys_state <- set_sys_state,
								stm_ref0::get_sys_state <- get_sys_state
							]]
						)
							[|{|terminate, stm_ref1::done, stm_ref2::done, stm_ref4::system_out_of_sync|}|]
						(
							(
								let
									const_UR_ur_n_waypoints = 3
								within 
								stm_ref1::O__(id__,
										    const_UR_ur_n_waypoints)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::move.in <- stm_ref3::ur_move_out.out,
									stm_ref1::move.out <- stm_ref3::ur_move_out.in,
									stm_ref1::set_sys_state <- set_sys_state,
									stm_ref1::get_sys_state <- get_sys_state,
									stm_ref1::moveLCall <- moveLCall,
									stm_ref1::movePCall <- movePCall,
									stm_ref1::moveJCall <- moveJCall,
									stm_ref1::moveL_with_tCall <- moveL_with_tCall
								]]
							)
								[|{|terminate, stm_ref1::out_of_sync, stm_ref3::ur_move_out|}|]
							(
								(
									let
										const_EXAX_n_waypoints = 1
									within 
									stm_ref2::O__(id__,
											    const_EXAX_n_waypoints)[[
										stm_ref2::terminate <- terminate,
										stm_ref2::move.in <- stm_ref3::exax_move_out.out,
										stm_ref2::move.out <- stm_ref3::exax_move_out.in,
										stm_ref2::set_sys_state <- set_sys_state,
										stm_ref2::get_sys_state <- get_sys_state,
										stm_ref2::go_to_posCall <- go_to_posCall
									]]
								)
									[|{|terminate, stm_ref2::out_of_sync, stm_ref3::exax_move_out|}|]
								(
									(
										stm_ref4::O__(id__)[[
											stm_ref4::terminate <- terminate,
											stm_ref4::UR_out_of_sync.in <- stm_ref1::out_of_sync.out,
											stm_ref4::UR_out_of_sync.out <- stm_ref1::out_of_sync.in,
											stm_ref4::EXAX_out_of_sync.in <- stm_ref2::out_of_sync.out,
											stm_ref4::EXAX_out_of_sync.out <- stm_ref2::out_of_sync.in
										]]
									)
										[|{|terminate|}|]
									(
										stm_ref3::O__(id__)[[
											stm_ref3::terminate <- terminate,
											stm_ref3::ur_move_in <- next_UR_move,
											stm_ref3::exax_move_in <- next_EXAX_move,
											stm_ref3::set_sys_state <- set_sys_state,
											stm_ref3::get_sys_state <- get_sys_state
										]]
									)
								)
								\diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\diff(
								{|terminate, stm_ref2::out_of_sync, stm_ref3::exax_move_out|},
								{|terminate|}
							)
						)
						\diff(
							{|terminate, stm_ref1::out_of_sync, stm_ref3::ur_move_out|},
							{|terminate|}
						)
					)
					\diff(
						{|terminate, stm_ref1::done, stm_ref2::done, stm_ref4::system_out_of_sync|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_sys_state,
									stm_ref1::set_EXT_sys_state,
									stm_ref2::set_EXT_sys_state,
									stm_ref3::set_EXT_sys_state
								|}
							)
						|]
					dbisim(Memory(id__, SystemState_wait_for_start))
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_sys_state,
						stm_ref1::set_EXT_sys_state,
						stm_ref2::set_EXT_sys_state,
						stm_ref3::set_EXT_sys_state
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__,
						    const_main_Controller_stm_ref1_ur_n_waypoints,
						    const_main_Controller_stm_ref2_n_waypoints) = sbisim(diamond(	((
						(
							stm_ref0::VS_O__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::start_system <- start_system,
								stm_ref0::UR_done.in <- stm_ref1::done.out,
								stm_ref0::UR_done.out <- stm_ref1::done.in,
								stm_ref0::EXAX_done.in <- stm_ref2::done.out,
								stm_ref0::EXAX_done.out <- stm_ref2::done.in,
								stm_ref0::out_of_sync.in <- stm_ref4::system_out_of_sync.out,
								stm_ref0::out_of_sync.out <- stm_ref4::system_out_of_sync.in,
								stm_ref0::set_sys_state <- set_sys_state,
								stm_ref0::get_sys_state <- get_sys_state
							]]
						)
							[|{|terminate, stm_ref1::done, stm_ref2::done, stm_ref4::system_out_of_sync|}|]
						(
							(
								let
									const_UR_ur_n_waypoints = 3
								within 
								stm_ref1::VS_O__(id__,
										    const_UR_ur_n_waypoints)[[
									stm_ref1::terminate <- terminate,
									stm_ref1::move.in <- stm_ref3::ur_move_out.out,
									stm_ref1::move.out <- stm_ref3::ur_move_out.in,
									stm_ref1::set_sys_state <- set_sys_state,
									stm_ref1::get_sys_state <- get_sys_state,
									stm_ref1::moveLCall <- moveLCall,
									stm_ref1::movePCall <- movePCall,
									stm_ref1::moveJCall <- moveJCall,
									stm_ref1::moveL_with_tCall <- moveL_with_tCall
								]]
							)
								[|{|terminate, stm_ref1::out_of_sync, stm_ref3::ur_move_out|}|]
							(
								(
									let
										const_EXAX_n_waypoints = 1
									within 
									stm_ref2::VS_O__(id__,
											    const_EXAX_n_waypoints)[[
										stm_ref2::terminate <- terminate,
										stm_ref2::move.in <- stm_ref3::exax_move_out.out,
										stm_ref2::move.out <- stm_ref3::exax_move_out.in,
										stm_ref2::set_sys_state <- set_sys_state,
										stm_ref2::get_sys_state <- get_sys_state,
										stm_ref2::go_to_posCall <- go_to_posCall
									]]
								)
									[|{|terminate, stm_ref2::out_of_sync, stm_ref3::exax_move_out|}|]
								(
									(
										stm_ref4::VS_O__(id__)[[
											stm_ref4::terminate <- terminate,
											stm_ref4::UR_out_of_sync.in <- stm_ref1::out_of_sync.out,
											stm_ref4::UR_out_of_sync.out <- stm_ref1::out_of_sync.in,
											stm_ref4::EXAX_out_of_sync.in <- stm_ref2::out_of_sync.out,
											stm_ref4::EXAX_out_of_sync.out <- stm_ref2::out_of_sync.in
										]]
									)
										[|{|terminate|}|]
									(
										stm_ref3::VS_O__(id__)[[
											stm_ref3::terminate <- terminate,
											stm_ref3::ur_move_in <- next_UR_move,
											stm_ref3::exax_move_in <- next_EXAX_move,
											stm_ref3::set_sys_state <- set_sys_state,
											stm_ref3::get_sys_state <- get_sys_state
										]]
									)
								)
								\diff(
									{|terminate|},
									{|terminate|}
								)
							)
							\diff(
								{|terminate, stm_ref2::out_of_sync, stm_ref3::exax_move_out|},
								{|terminate|}
							)
						)
						\diff(
							{|terminate, stm_ref1::out_of_sync, stm_ref3::ur_move_out|},
							{|terminate|}
						)
					)
					\diff(
						{|terminate, stm_ref1::done, stm_ref2::done, stm_ref4::system_out_of_sync|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
									stm_ref0::set_EXT_sys_state,
									stm_ref1::set_EXT_sys_state,
									stm_ref2::set_EXT_sys_state,
									stm_ref3::set_EXT_sys_state
								|}
							)
						|]
					dbisim(Memory(id__, SystemState_wait_for_start))
				)
				\ union(
					{|
					|},
					{|
						stm_ref0::set_EXT_sys_state,
						stm_ref1::set_EXT_sys_state,
						stm_ref2::set_EXT_sys_state,
						stm_ref3::set_EXT_sys_state
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__,
						    const_main_Controller_stm_ref1_ur_n_waypoints,
						    const_main_Controller_stm_ref2_n_waypoints) = O__(id__,
						    const_main_Controller_stm_ref1_ur_n_waypoints,
						    const_main_Controller_stm_ref2_n_waypoints) [|shared_variable_events|] SKIP			
	
		endmodule
	
	-- declaring module memory
	Memory(id__, sys_state) = (
					set_sys_state?x__ -> 
					Controller::set_EXT_sys_state!x__ -> 
					Memory(id__,x__)
					)
	
	D__(id__,
			    const_main_Controller_stm_ref1_ur_n_waypoints,
			    const_main_Controller_stm_ref2_n_waypoints) = 	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						Controller::D__(id__,
								    const_main_Controller_stm_ref1_ur_n_waypoints,
								    const_main_Controller_stm_ref2_n_waypoints)[[
							Controller::terminate <- terminate,
							Controller::start_system <- start_system,
							Controller::next_UR_move <- next_UR_move,
							Controller::next_EXAX_move <- next_EXAX_move,
							Controller::set_sys_state <- set_sys_state,
							Controller::get_sys_state <- get_sys_state,
							Controller::moveLCall <- moveLCall,
							Controller::movePCall <- movePCall,
							Controller::go_to_posCall <- go_to_posCall,
							Controller::moveJCall <- moveJCall,
							Controller::moveL_with_tCall <- moveL_with_tCall
						]]
					)
						[|
							union(
								{|
									set_sys_state
								|},
								{|
									Controller::set_EXT_sys_state
								|}
							)
						|]
					Memory(id__, SystemState_wait_for_start)
				)
			)
			\ Union({
				{|
				|},
				{|
					Controller::set_EXT_sys_state
				|},
				{|
					get_sys_state, set_sys_state
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- visible state equivalent
	
	VS__(id__,
			    const_main_Controller_stm_ref1_ur_n_waypoints,
			    const_main_Controller_stm_ref2_n_waypoints) = 	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						Controller::VS__(id__,
								    const_main_Controller_stm_ref1_ur_n_waypoints,
								    const_main_Controller_stm_ref2_n_waypoints)[[
							Controller::terminate <- terminate,
							Controller::start_system <- start_system,
							Controller::next_UR_move <- next_UR_move,
							Controller::next_EXAX_move <- next_EXAX_move,
							Controller::set_sys_state <- set_sys_state,
							Controller::get_sys_state <- get_sys_state,
							Controller::moveLCall <- moveLCall,
							Controller::movePCall <- movePCall,
							Controller::go_to_posCall <- go_to_posCall,
							Controller::moveJCall <- moveJCall,
							Controller::moveL_with_tCall <- moveL_with_tCall
						]]
					)
						[|
							union(
								{|
									set_sys_state
								|},
								{|
									Controller::set_EXT_sys_state
								|}
							)
						|]
					Memory(id__, SystemState_wait_for_start)
				)
			)
			\ Union({
				{|
				|},
				{|
					Controller::set_EXT_sys_state
				|},
				{|
					get_sys_state, set_sys_state
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- O version (optimised)
	
	O__(id__,
			    const_main_Controller_stm_ref1_ur_n_waypoints,
			    const_main_Controller_stm_ref2_n_waypoints) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						Controller::O__(id__,
								    const_main_Controller_stm_ref1_ur_n_waypoints,
								    const_main_Controller_stm_ref2_n_waypoints)[[
							Controller::terminate <- terminate,
							Controller::start_system <- start_system,
							Controller::next_UR_move <- next_UR_move,
							Controller::next_EXAX_move <- next_EXAX_move,
							Controller::set_sys_state <- set_sys_state,
							Controller::get_sys_state <- get_sys_state,
							Controller::moveLCall <- moveLCall,
							Controller::movePCall <- movePCall,
							Controller::go_to_posCall <- go_to_posCall,
							Controller::moveJCall <- moveJCall,
							Controller::moveL_with_tCall <- moveL_with_tCall
						]]
					)
						[|
							union(
								{|
									set_sys_state
								|},
								{|
									Controller::set_EXT_sys_state
								|}
							)
						|]
					dbisim(Memory(id__, SystemState_wait_for_start))
				)
			)
			\ Union({
				{|
				|},
				{|
					Controller::set_EXT_sys_state
				|},
				{|
					get_sys_state, set_sys_state
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- visible state optimised equivalent
	
	VS_O__(id__,
			    const_main_Controller_stm_ref1_ur_n_waypoints,
			    const_main_Controller_stm_ref2_n_waypoints) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						Controller::VS_O__(id__,
								    const_main_Controller_stm_ref1_ur_n_waypoints,
								    const_main_Controller_stm_ref2_n_waypoints)[[
							Controller::terminate <- terminate,
							Controller::start_system <- start_system,
							Controller::next_UR_move <- next_UR_move,
							Controller::next_EXAX_move <- next_EXAX_move,
							Controller::set_sys_state <- set_sys_state,
							Controller::get_sys_state <- get_sys_state,
							Controller::moveLCall <- moveLCall,
							Controller::movePCall <- movePCall,
							Controller::go_to_posCall <- go_to_posCall,
							Controller::moveJCall <- moveJCall,
							Controller::moveL_with_tCall <- moveL_with_tCall
						]]
					)
						[|
							union(
								{|
									set_sys_state
								|},
								{|
									Controller::set_EXT_sys_state
								|}
							)
						|]
					dbisim(Memory(id__, SystemState_wait_for_start))
				)
			)
			\ Union({
				{|
				|},
				{|
					Controller::set_EXT_sys_state
				|},
				{|
					get_sys_state, set_sys_state
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- O version (optimised) with visible assignments
	
	AS_O__(id__,
			    const_main_Controller_stm_ref1_ur_n_waypoints,
			    const_main_Controller_stm_ref2_n_waypoints) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						Controller::O__(id__,
								    const_main_Controller_stm_ref1_ur_n_waypoints,
								    const_main_Controller_stm_ref2_n_waypoints)[[
							Controller::terminate <- terminate,
							Controller::start_system <- start_system,
							Controller::next_UR_move <- next_UR_move,
							Controller::next_EXAX_move <- next_EXAX_move,
							Controller::set_sys_state <- set_sys_state,
							Controller::get_sys_state <- get_sys_state,
							Controller::moveLCall <- moveLCall,
							Controller::movePCall <- movePCall,
							Controller::go_to_posCall <- go_to_posCall,
							Controller::moveJCall <- moveJCall,
							Controller::moveL_with_tCall <- moveL_with_tCall
						]]
					)
						[|
							union(
								{|
									set_sys_state
								|},
								{|
									Controller::set_EXT_sys_state
								|}
							)
						|]
					dbisim(Memory(id__, SystemState_wait_for_start))
				)
			)
			\ Union({
				{|
				|},
				{|
					Controller::set_EXT_sys_state
				|},
				{|
					get_sys_state
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
endmodule




