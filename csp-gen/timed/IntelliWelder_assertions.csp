
--
-- RoboChart generator version 3.0.0.202311281716
-- Automatically generated on 14-05-2024 09:23:32
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "defs/System.csp"
include "defs/state_timed_defs.csp"
include "defs/core_defs.csp"
include "defs/file_out_of_sync_relay_defs.csp"
include "defs/file_UR_STM_defs.csp"
include "defs/sequence_toolkit_defs.csp"
include "defs/file_state_checkSTM_defs.csp"
include "defs/file_EXAX_STM_defs.csp"
include "defs/UR.csp"
include "defs/file_main_defs.csp"
include "defs/EXAX.csp"
include "defs/function_toolkit_defs.csp"
include "defs/robochart_defs.csp"
include "defs/core_timed_defs.csp"
include "defs/set_toolkit_defs.csp"
include "instantiations.csp"
include "defs/file_SystemSTM_defs.csp"
include "defs/relation_toolkit_defs.csp"
include "defs/file_image_creation_defs.csp"

channel r__

Timed(OneStep) {
	ADeadline(E,d) = (CHAOS(Events) ||| Deadline(SKIP,d)) [|E|> SKIP
}

Timed (OneStep) {
	SpecA1 = let
				Def = (CHAOS(Events) [| {|EXAX::move.in|} |> ADeadline({|EXAX::go_to_posCall|}, 0)); Def
			 within
				timed_priority(Def)
}

Timed(OneStep) {
  EXAX2 = EXAX::D__(0, 1) \ {| EXAX::go_to_posCall |}
}

Timed(OneStep) {
  UR2 = UR::D__(0, 3) \ {| UR::moveJCall, UR::movePCall, UR::moveLCall, UR::moveL_with_tCall |}
}

Timed(OneStep) {
	SpecA3 = let
				Def = (CHAOS(Events) [| {|UR::move.in|} |> ADeadline({|UR::moveJCall, UR::movePCall, UR::moveLCall, UR::moveL_with_tCall|}, 0)); Def
			 within
			 	timed_priority(Def)
	}

SysConstrained = (System::D__(0) [| {| System::out_of_sync |} |] SKIP)
	SysTerminates = (SysConstrained ; System::terminate -> SKIP) |\ {| System::terminate |}

Stop = STOP

-- A1 - refinement
assert SpecA1 [T= let 
	id__ = 0
	
	
	const_EXAX_n_waypoints = 1
	
within
	EXAX::D__(id__,
			    const_EXAX_n_waypoints)

-- A2 - timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= EXAX2

-- A3 - refinement
assert SpecA3 [T= let 
	id__ = 0
	
	
	const_UR_ur_n_waypoints = 3
	
within
	UR::D__(id__,
			    const_UR_ur_n_waypoints)

-- A4 - timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= UR2

-- A5 - non terminating
assert STOP [T= let 
	id__ = 0
	
	
	const_EXAX_n_waypoints = 1
	
within
	EXAX::D__(id__,
			    const_EXAX_n_waypoints)\Events;r__ -> SKIP

-- A6 - non terminating
assert STOP [T= let 
	id__ = 0
	
	
	const_UR_ur_n_waypoints = 3
	
within
	UR::D__(id__,
			    const_UR_ur_n_waypoints)\Events;r__ -> SKIP

-- A7 - refinement
assert Stop [T= SysTerminates

