
--
-- RoboChart generator version 3.0.0.202311281716
-- Automatically generated on 14-05-2024 09:23:33
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module System
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_wait_for_start|
	              NID_working|
	              NID_i0|
	              NID_UR_finished|
	              NID_EXAX_finished|
	              NID_j0|
	              NID_f0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_sys_state, set_sys_state, setL_sys_state, setR_sys_state: SystemState
	
	-- Shared variable channels
	channel set_EXT_sys_state: SystemState
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel start_system__: NIDS.InOut
	channel start_system: InOut
	channel UR_done__: NIDS.InOut
	channel UR_done: InOut
	channel EXAX_done__: NIDS.InOut
	channel EXAX_done: InOut
	channel out_of_sync__: NIDS.InOut
	channel out_of_sync: InOut
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	wait_for_start::enter,
	working::enter,
	i0::enter,
	UR_finished::enter,
	EXAX_finished::enter,
	j0::enter,
	f0::enter
	|}
	
	enteredSS = 	{|
	wait_for_start::entered,
	working::entered,
	UR_finished::entered,
	EXAX_finished::entered,
	f0::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
		set_EXT_sys_state
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	set_EXT_sys_state, set_sys_state
	,	start_system,
		UR_done,
		EXAX_done,
		out_of_sync
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_wait_for_start : core_clock_type 
	channel get_CLID_EXAX_finished : core_clock_type 
	channel get_CLID_UR_finished : core_clock_type 
	channel get_CLID_f0 : core_clock_type 
	channel get_CLID_working : core_clock_type 
	--channel increment__
	
	CLID_wait_for_start_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_EXAX_finished_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_UR_finished_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_f0_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_working_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	

		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- State: wait_for_start
		module wait_for_start
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_wait_for_start -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_wait_for_start -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: working
		module working
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_working -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_working -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: UR_finished
		module UR_finished
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_UR_finished -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_UR_finished -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: EXAX_finished
		module EXAX_finished
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_EXAX_finished -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_sys_state!SystemState_EXAX_finished -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Junction: j0
		module j0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Final state: f0
		module f0
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		STM_VS_O(id__) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		-- Transitions
		Transitions(id__) = ((let
			Trans = TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; wait_for_start::enter -> SKIP))))
				 [] dbisim((true)&(start_system__!NID_wait_for_start.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; working::enter -> SKIP)))
				 [] dbisim((true)&(UR_done__!NID_working.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; UR_finished::enter -> SKIP)))
				 [] dbisim((true)&(EXAX_done__!NID_working.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; EXAX_finished::enter -> SKIP)))
				 [] dbisim((true)&(EXAX_done__!NID_UR_finished.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
				 [] dbisim((true)&(UR_done__!NID_EXAX_finished.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
				 [] dbisim((true)&(internal__!NID_j0 -> SKIP ;  ((SKIP ; wait_for_start::enter -> SKIP))))
				 [] dbisim((true)&(out_of_sync__!NID_working.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
				 [] dbisim((true)&(out_of_sync__!NID_UR_finished.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
				 [] dbisim((true)&(out_of_sync__!NID_EXAX_finished.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					wait_for_start::enter,
					working::enter,
					i0::enter,
					UR_finished::enter,
					EXAX_finished::enter,
					j0::enter,
					f0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,start_system__.NID_wait_for_start.in,UR_done__.NID_working.in,EXAX_done__.NID_working.in,EXAX_done__.NID_UR_finished.in,UR_done__.NID_EXAX_finished.in,internal__.NID_j0,out_of_sync__.NID_working.in,out_of_sync__.NID_UR_finished.in,out_of_sync__.NID_EXAX_finished.in|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   wait_for_start::D__(id__)
						   [| { share__, terminate } |] (
						   working::D__(id__)
						   [| { share__, terminate } |] (
						   i0::D__(id__)
						   [| { share__, terminate } |] (
						   UR_finished::D__(id__)
						   [| { share__, terminate } |] (
						   EXAX_finished::D__(id__)
						   [| { share__, terminate } |] (
						   j0::D__(id__)
						   [| { share__, terminate } |] (
						   f0::D__(id__)
						   )
						   )
						   )
						   )
						   )
						   )
						 )
						 [[wait_for_start::interrupt <- x__ | x__ <- {|interrupt,start_system__.NID_wait_for_start.in|}]]
						 [[working::interrupt <- x__ | x__ <- {|interrupt,UR_done__.NID_working.in,EXAX_done__.NID_working.in,out_of_sync__.NID_working.in|}]]
						 [[UR_finished::interrupt <- x__ | x__ <- {|interrupt,EXAX_done__.NID_UR_finished.in,out_of_sync__.NID_UR_finished.in|}]]
						 [[EXAX_finished::interrupt <- x__ | x__ <- {|interrupt,UR_done__.NID_EXAX_finished.in,out_of_sync__.NID_EXAX_finished.in|}]]
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						|}) |]
						 ((i0::enter -> Transitions(id__))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
					[[
						start_system__.x____ <- start_system,
						UR_done__.x____ <- UR_done,
						EXAX_done__.x____ <- EXAX_done,
						out_of_sync__.x____ <- out_of_sync
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_wait_for_start,wait_for_start::entered,get_CLID_EXAX_finished,EXAX_finished::entered,get_CLID_UR_finished,UR_finished::entered,get_CLID_working,working::entered|}
			 within
				(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_wait_for_start,wait_for_start::entered,get_CLID_EXAX_finished,EXAX_finished::entered,get_CLID_UR_finished,UR_finished::entered,get_CLID_working,working::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												MachineBody(id__)
												[| {|get_CLID_working,working::entered,terminate|} |]
												dbisim(Clock_CLID_working(id__,0))
											)\{|get_CLID_working|}
										)
										[| {|get_CLID_UR_finished,UR_finished::entered,terminate|} |]
										dbisim(Clock_CLID_UR_finished(id__,0))
									)\{|get_CLID_UR_finished|}
								)
								[| {|get_CLID_EXAX_finished,EXAX_finished::entered,terminate|} |]
								dbisim(Clock_CLID_EXAX_finished(id__,0))
							)\{|get_CLID_EXAX_finished|}
						)
						[| {|get_CLID_wait_for_start,wait_for_start::entered,terminate|} |]
						dbisim(Clock_CLID_wait_for_start(id__,0))
					)\{|get_CLID_wait_for_start|}
				)
				) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__) = 
			((let
				getsetLocalChannels = {||}
				clockSync = {||}
			within
				(Behaviour(id__) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__) =
			(IteratedBehaviour(id__))
		
		-- Visible counterparts
		MachineBody_VS_O(id__) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					wait_for_start::enter,
					working::enter,
					i0::enter,
					UR_finished::enter,
					EXAX_finished::enter,
					j0::enter,
					f0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,start_system__.NID_wait_for_start.in,UR_done__.NID_working.in,EXAX_done__.NID_working.in,EXAX_done__.NID_UR_finished.in,UR_done__.NID_EXAX_finished.in,internal__.NID_j0,out_of_sync__.NID_working.in,out_of_sync__.NID_UR_finished.in,out_of_sync__.NID_EXAX_finished.in|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   wait_for_start::VS_O__(id__)
						   [| { share__, terminate } |] (
						   working::VS_O__(id__)
						   [| { share__, terminate } |] (
						   i0::VS_O__(id__)
						   [| { share__, terminate } |] (
						   UR_finished::VS_O__(id__)
						   [| { share__, terminate } |] (
						   EXAX_finished::VS_O__(id__)
						   [| { share__, terminate } |] (
						   j0::VS_O__(id__)
						   [| { share__, terminate } |] (
						   f0::VS_O__(id__)
						   )
						   )
						   )
						   )
						   )
						   )
						 )
						 [[wait_for_start::interrupt <- x__ | x__ <- {|interrupt,start_system__.NID_wait_for_start.in|}]]
						 [[working::interrupt <- x__ | x__ <- {|interrupt,UR_done__.NID_working.in,EXAX_done__.NID_working.in,out_of_sync__.NID_working.in|}]]
						 [[UR_finished::interrupt <- x__ | x__ <- {|interrupt,EXAX_done__.NID_UR_finished.in,out_of_sync__.NID_UR_finished.in|}]]
						 [[EXAX_finished::interrupt <- x__ | x__ <- {|interrupt,UR_done__.NID_EXAX_finished.in,out_of_sync__.NID_EXAX_finished.in|}]]
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						|}) |]
						 ((i0::enter -> Transitions(id__))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
					[[
						start_system__.x____ <- start_system,
						UR_done__.x____ <- UR_done,
						EXAX_done__.x____ <- EXAX_done,
						out_of_sync__.x____ <- out_of_sync
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_wait_for_start,wait_for_start::entered,get_CLID_EXAX_finished,EXAX_finished::entered,get_CLID_UR_finished,UR_finished::entered,get_CLID_working,working::entered|}
			 within
				(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_wait_for_start,wait_for_start::entered,get_CLID_EXAX_finished,EXAX_finished::entered,get_CLID_UR_finished,UR_finished::entered,get_CLID_working,working::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												MachineBody_VS_O(id__)
												[| {|get_CLID_working,working::entered,terminate|} |]
												dbisim(Clock_CLID_working(id__,0))
											)\{|get_CLID_working|}
										)
										[| {|get_CLID_UR_finished,UR_finished::entered,terminate|} |]
										dbisim(Clock_CLID_UR_finished(id__,0))
									)\{|get_CLID_UR_finished|}
								)
								[| {|get_CLID_EXAX_finished,EXAX_finished::entered,terminate|} |]
								dbisim(Clock_CLID_EXAX_finished(id__,0))
							)\{|get_CLID_EXAX_finished|}
						)
						[| {|get_CLID_wait_for_start,wait_for_start::entered,terminate|} |]
						dbisim(Clock_CLID_wait_for_start(id__,0))
					)\{|get_CLID_wait_for_start|}
				)
				) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__) = 
			dbisim((let
				getsetLocalChannels = {||}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__) =
			(IteratedBehaviour_VS_O(id__))
		
		-- END
		
		-- Memory
		-- Memory variables
		
		-- varMemory process
		varMemory(id__) = terminate -> SKIP
		
		getsetLocalChannels = {||}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__) = STM_VS_O(id__) \ localClockResets
		D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
		O__(id__) = dbisim(D__(id__))
		VS__(id__) = FVS__(id__)
		VS_O__(id__) = dbisim(FVS__(id__))
		HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
		FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
		HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_wait_for_start(id__,x__) = 
			TimeOut_1(
				wait_for_start::entered -> Clock_CLID_wait_for_start(id__,0)
				[]
				get_CLID_wait_for_start!x__ -> Clock_CLID_wait_for_start(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_wait_for_start(id__,clock_type_plus(x__,1,CLID_wait_for_start_clock_type(id__))))
		Clock_CLID_EXAX_finished(id__,x__) = 
			TimeOut_1(
				EXAX_finished::entered -> Clock_CLID_EXAX_finished(id__,0)
				[]
				get_CLID_EXAX_finished!x__ -> Clock_CLID_EXAX_finished(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_EXAX_finished(id__,clock_type_plus(x__,1,CLID_EXAX_finished_clock_type(id__))))
		Clock_CLID_UR_finished(id__,x__) = 
			TimeOut_1(
				UR_finished::entered -> Clock_CLID_UR_finished(id__,0)
				[]
				get_CLID_UR_finished!x__ -> Clock_CLID_UR_finished(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_UR_finished(id__,clock_type_plus(x__,1,CLID_UR_finished_clock_type(id__))))
		Clock_CLID_working(id__,x__) = 
			TimeOut_1(
				working::entered -> Clock_CLID_working(id__,0)
				[]
				get_CLID_working!x__ -> Clock_CLID_working(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_working(id__,clock_type_plus(x__,1,CLID_working_clock_type(id__))))
		
		StateClocks(id__) = dbisim(Clock_CLID_wait_for_start(id__,0))
		[| { terminate } |] (
		dbisim(Clock_CLID_EXAX_finished(id__,0))
		[| { terminate } |] (
		dbisim(Clock_CLID_UR_finished(id__,0))
		[| { terminate } |] (
		dbisim(Clock_CLID_working(id__,0))
		)
		)
		)
		
		stateClockSync = {|get_CLID_wait_for_start,wait_for_start::entered,get_CLID_EXAX_finished,EXAX_finished::entered,get_CLID_UR_finished,UR_finished::entered,get_CLID_working,working::entered|}
		
		-- Shared memory
		-- Shared memory variables
		Memory_sys_state(sys_state) =
			get_sys_state!sys_state -> Memory_sys_state(sys_state)
			[]
			set_sys_state?x__ -> Memory_sys_state(x__)
			[]
			set_EXT_sys_state?x__ -> Memory_sys_state(x__)
			[]
			terminate -> SKIP
		
		-- sharedVarMemory process
		sharedVarMemory(id__) = Memory_sys_state(SystemState_wait_for_start)
		
		sharedVarSync = {|get_sys_state,set_sys_state,set_EXT_sys_state|}
		
		sharedVarHide = {|get_sys_state|}
		}
endmodule
