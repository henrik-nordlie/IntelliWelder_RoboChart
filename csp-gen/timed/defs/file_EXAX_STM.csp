
--
-- RoboChart generator version 3.0.0.202311281716
-- Automatically generated on 20-04-2024 11:37:58
--
-- Iterated compression status: true
-- Assertions compression status: false
--




module EXAX
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_wait_for_move|
	              NID_by_position|
	              NID_reset_EXAX|
	              NID_f0|
	              NID_j0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_curr_waypoint, set_curr_waypoint, setL_curr_waypoint, setR_curr_waypoint: core_nat
	channel get_exax_move, set_exax_move, setL_exax_move, setR_exax_move: EXAX_move
	channel get_sys_state, set_sys_state, setL_sys_state, setR_sys_state: SystemState
	
	-- Shared variable channels
	channel set_EXT_sys_state: SystemState
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel move__: NIDS.InOut.EXAX_move
	channel move: InOut.EXAX_move
	channel done__: NIDS.InOut
	channel done: InOut
	channel out_of_sync__: NIDS.InOut
	channel out_of_sync: InOut
	
	-- Declaring call and ret events for undefined operations
	channel go_to_posCall: core_real.core_real
	
	enterSS = {|
	i0::enter,
	wait_for_move::enter,
	by_position::enter,
	reset_EXAX::enter,
	f0::enter,
	j0::enter
	|}
	
	enteredSS = 	{|
	wait_for_move::entered,
	by_position::entered,
	reset_EXAX::entered,
	f0::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
		set_EXT_sys_state
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	set_EXT_sys_state, set_sys_state
	,	move,
		done,
		out_of_sync
	,	go_to_posCall
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_wait_for_move : core_clock_type 
	channel get_CLID_by_position : core_clock_type 
	channel get_CLID_f0 : core_clock_type 
	channel get_CLID_reset_EXAX : core_clock_type 
	--channel increment__
	
	CLID_wait_for_move_clock_type(id__,
			          const_EXAX_n_waypoints) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_by_position_clock_type(id__,
			          const_EXAX_n_waypoints) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_f0_clock_type(id__,
			          const_EXAX_n_waypoints) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_reset_EXAX_clock_type(id__,
			          const_EXAX_n_waypoints) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	

		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
						    const_EXAX_n_waypoints) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
						    const_EXAX_n_waypoints) = D__(id__,
						    const_EXAX_n_waypoints)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: wait_for_move
		module wait_for_move
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_EXAX_n_waypoints) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_EXAX_n_waypoints) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_EXAX_n_waypoints) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: by_position
		module by_position
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_EXAX_n_waypoints) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_exax_move?exax_move -> true&CALL__go_to_pos(
								id__,
							    const_EXAX_n_waypoints,
								EXAX_move_goal_time(exax_move),
								EXAX_move_dist(exax_move)
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_EXAX_n_waypoints) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(get_exax_move?exax_move -> true&CALL__go_to_pos(
								id__,
							    const_EXAX_n_waypoints,
								EXAX_move_goal_time(exax_move),
								EXAX_move_dist(exax_move)
							)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_EXAX_n_waypoints) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: reset_EXAX
		module reset_EXAX
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_EXAX_n_waypoints) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_curr_waypoint!0 -> SKIP)));true&(share__choice(done.out -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_EXAX_n_waypoints) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_curr_waypoint!0 -> SKIP)));true&(share__choice(done.out -> SKIP)) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_EXAX_n_waypoints) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Final state: f0
		module f0
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__,
						    const_EXAX_n_waypoints) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_EXAX_n_waypoints) = D__(id__,
						    const_EXAX_n_waypoints)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Junction: j0
		module j0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
						    const_EXAX_n_waypoints) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_EXAX_n_waypoints) = D__(id__,
						    const_EXAX_n_waypoints)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		CALL__go_to_pos(id__,
				    const_EXAX_n_waypoints,
					param_dist,
					param_time_budget) = EDeadline(go_to_posCall.param_dist.param_time_budget,0)
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
				    const_EXAX_n_waypoints) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful(id__,
							    const_EXAX_n_waypoints) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_EXAX_n_waypoints))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		STM_VS_O(id__,
				    const_EXAX_n_waypoints) = prioritise(-- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful_VS_O(id__,
							    const_EXAX_n_waypoints) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {|set_EXT_sys_state|} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_EXAX_n_waypoints))
		)\sharedVarHide
		,<{terminate},{tock}>)
		
		-- Transitions
		Transitions(id__,
				    const_EXAX_n_waypoints) = ((let
			Trans = share__choice(get_curr_waypoint?curr_waypoint -> get_exax_move?exax_move -> get_sys_state?sys_state -> TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; wait_for_move::enter -> SKIP))))
				 [] dbisim(((curr_waypoint<const_EXAX_n_waypoints))&(internal__!NID_by_position -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_curr_waypoint?curr_waypoint -> true & (share__choice(set_curr_waypoint!Plus(curr_waypoint, 1, core_nat) -> SKIP)))) ; wait_for_move::enter -> SKIP)))
				 [] dbisim(((curr_waypoint>=const_EXAX_n_waypoints))&(internal__!NID_by_position -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; reset_EXAX::enter -> SKIP)))
				 [] dbisim((true)&(internal__!NID_reset_EXAX -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; wait_for_move::enter -> SKIP)))
				 [] dbisim((move__!NID_wait_for_move.in?exax_move:{exax_move|exax_move <- EXAX_move, ((sys_state==SystemState_working) or (sys_state==SystemState_UR_finished))} -> share__choice(set_exax_move!exax_move -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; j0::enter -> SKIP)))
				 [] dbisim(((EXAX_move_goal_time(exax_move)<0))&(internal__!NID_j0 -> SKIP ;  ((true&(share__choice(out_of_sync.out -> SKIP)) ; f0::enter -> SKIP))))
				 [] dbisim(((EXAX_move_goal_time(exax_move)>=0))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; by_position::enter -> SKIP))))
				 [] dbisim((move__!NID_wait_for_move.in?exax_move:{exax_move|exax_move <- EXAX_move, ((sys_state==SystemState_EXAX_finished) or (sys_state==SystemState_wait_for_start))} -> share__choice(set_exax_move!exax_move -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; wait_for_move::enter -> SKIP)))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
			)
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
				    const_EXAX_n_waypoints) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					wait_for_move::enter,
					by_position::enter,
					reset_EXAX::enter,
					f0::enter,
					j0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,internal__.NID_by_position,internal__.NID_by_position,internal__.NID_reset_EXAX,move__.NID_wait_for_move.in,internal__.NID_j0,internal__.NID_j0,move__.NID_wait_for_move.in|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::D__(id__,
						   		    const_EXAX_n_waypoints)
						   [| { share__, terminate } |] (
						   wait_for_move::D__(id__,
						   		    const_EXAX_n_waypoints)
						   [| { share__, terminate } |] (
						   by_position::D__(id__,
						   		    const_EXAX_n_waypoints)
						   [| { share__, terminate } |] (
						   reset_EXAX::D__(id__,
						   		    const_EXAX_n_waypoints)
						   [| { share__, terminate } |] (
						   f0::D__(id__,
						   		    const_EXAX_n_waypoints)
						   [| { share__, terminate } |] (
						   j0::D__(id__,
						   		    const_EXAX_n_waypoints)
						   )
						   )
						   )
						   )
						   )
						 )
						 [[wait_for_move::interrupt <- x__ | x__ <- {|interrupt,move__.NID_wait_for_move.in,move__.NID_wait_for_move.in|}]]
						 [[by_position::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_by_position,internal__.NID_by_position|}]]
						 [[reset_EXAX::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_reset_EXAX|}]]
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_exax_move |} ]] 
						  [[set_curr_waypoint <- setL_curr_waypoint,set_exax_move <- setL_exax_move,set_sys_state <- setL_sys_state]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_curr_waypoint
						 			,setL_exax_move
						 			,setL_sys_state
						 			,setR_exax_move
						 			|}) |]
						 ((i0::enter -> Transitions(id__,
						 		    const_EXAX_n_waypoints))
						  [[ share__ <- x__ | x__ <- {| share__,setL_curr_waypoint,setL_exax_move,setL_sys_state |} ]]
						  [[set_exax_move <- setR_exax_move]]
						 )
						)[[setL_curr_waypoint <- set_curr_waypoint,setL_exax_move <- set_exax_move,setL_sys_state <- set_sys_state]]
						 [[setR_exax_move <- set_exax_move]]
						)
					)
					 \ hideSet)
					[[
						move__.x____ <- move,
						done__.x____ <- done,
						out_of_sync__.x____ <- out_of_sync
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_EXAX_n_waypoints)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
				    const_EXAX_n_waypoints) = 
			dbisim((let
				stateClockSync = {|get_CLID_wait_for_move,wait_for_move::entered,get_CLID_by_position,by_position::entered,get_CLID_reset_EXAX,reset_EXAX::entered|}
			 within
				(MachineBody(id__,
						    const_EXAX_n_waypoints) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_EXAX_n_waypoints)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__,
				    const_EXAX_n_waypoints) = 
			dbisim((let
				stateClockSync = {|get_CLID_wait_for_move,wait_for_move::entered,get_CLID_by_position,by_position::entered,get_CLID_reset_EXAX,reset_EXAX::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody(id__,
												    const_EXAX_n_waypoints)
										[| {|get_CLID_reset_EXAX,reset_EXAX::entered,terminate|} |]
										dbisim(Clock_CLID_reset_EXAX(id__,0,
												          const_EXAX_n_waypoints))
									)\{|get_CLID_reset_EXAX|}
								)
								[| {|get_CLID_by_position,by_position::entered,terminate|} |]
								dbisim(Clock_CLID_by_position(id__,0,
										          const_EXAX_n_waypoints))
							)\{|get_CLID_by_position|}
						)
						[| {|get_CLID_wait_for_move,wait_for_move::entered,terminate|} |]
						dbisim(Clock_CLID_wait_for_move(id__,0,
								          const_EXAX_n_waypoints))
					)\{|get_CLID_wait_for_move|}
				)
				) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__,
				    const_EXAX_n_waypoints) = 
			((let
				getsetLocalChannels = {|get_curr_waypoint,set_curr_waypoint,
				get_exax_move,set_exax_move|}
				clockSync = {||}
			within
				(Behaviour(id__,
						    const_EXAX_n_waypoints) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_EXAX_n_waypoints) [| {terminate} |] Clocks(id__,
				 		          const_EXAX_n_waypoints))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__,
				    const_EXAX_n_waypoints) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							IteratedBehaviour(id__,
									    const_EXAX_n_waypoints)
							[| {|get_exax_move,set_exax_move,terminate|} |]
							Memory_exax_move((0,0))
						)\{|get_exax_move,set_exax_move|}
					)
					[| {|get_curr_waypoint,set_curr_waypoint,terminate|} |]
					Memory_curr_waypoint(0)
				)\{|get_curr_waypoint,set_curr_waypoint|}
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
				    const_EXAX_n_waypoints) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					wait_for_move::enter,
					by_position::enter,
					reset_EXAX::enter,
					f0::enter,
					j0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,internal__.NID_by_position,internal__.NID_by_position,internal__.NID_reset_EXAX,move__.NID_wait_for_move.in,internal__.NID_j0,internal__.NID_j0,move__.NID_wait_for_move.in|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::VS_O__(id__,
						   		    const_EXAX_n_waypoints)
						   [| { share__, terminate } |] (
						   wait_for_move::VS_O__(id__,
						   		    const_EXAX_n_waypoints)
						   [| { share__, terminate } |] (
						   by_position::VS_O__(id__,
						   		    const_EXAX_n_waypoints)
						   [| { share__, terminate } |] (
						   reset_EXAX::VS_O__(id__,
						   		    const_EXAX_n_waypoints)
						   [| { share__, terminate } |] (
						   f0::VS_O__(id__,
						   		    const_EXAX_n_waypoints)
						   [| { share__, terminate } |] (
						   j0::VS_O__(id__,
						   		    const_EXAX_n_waypoints)
						   )
						   )
						   )
						   )
						   )
						 )
						 [[wait_for_move::interrupt <- x__ | x__ <- {|interrupt,move__.NID_wait_for_move.in,move__.NID_wait_for_move.in|}]]
						 [[by_position::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_by_position,internal__.NID_by_position|}]]
						 [[reset_EXAX::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_reset_EXAX|}]]
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_exax_move |} ]] 
						  [[set_curr_waypoint <- setL_curr_waypoint,set_exax_move <- setL_exax_move,set_sys_state <- setL_sys_state]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_curr_waypoint
						 			,setL_exax_move
						 			,setL_sys_state
						 			,setR_exax_move
						 			|}) |]
						 ((i0::enter -> Transitions(id__,
						 		    const_EXAX_n_waypoints))
						  [[ share__ <- x__ | x__ <- {| share__,setL_curr_waypoint,setL_exax_move,setL_sys_state |} ]]
						  [[set_exax_move <- setR_exax_move]]
						 )
						)[[setL_curr_waypoint <- set_curr_waypoint,setL_exax_move <- set_exax_move,setL_sys_state <- set_sys_state]]
						 [[setR_exax_move <- set_exax_move]]
						)
					)
					 \ hideSet)
					[[
						move__.x____ <- move,
						done__.x____ <- done,
						out_of_sync__.x____ <- out_of_sync
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_EXAX_n_waypoints)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
				    const_EXAX_n_waypoints) = 
			dbisim((let
				stateClockSync = {|get_CLID_wait_for_move,wait_for_move::entered,get_CLID_by_position,by_position::entered,get_CLID_reset_EXAX,reset_EXAX::entered|}
			 within
				(MachineBody_VS_O(id__,
						    const_EXAX_n_waypoints) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_EXAX_n_waypoints)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__,
				    const_EXAX_n_waypoints) = 
			dbisim((let
				stateClockSync = {|get_CLID_wait_for_move,wait_for_move::entered,get_CLID_by_position,by_position::entered,get_CLID_reset_EXAX,reset_EXAX::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody_VS_O(id__,
												    const_EXAX_n_waypoints)
										[| {|get_CLID_reset_EXAX,reset_EXAX::entered,terminate|} |]
										dbisim(Clock_CLID_reset_EXAX(id__,0,
												          const_EXAX_n_waypoints))
									)\{|get_CLID_reset_EXAX|}
								)
								[| {|get_CLID_by_position,by_position::entered,terminate|} |]
								dbisim(Clock_CLID_by_position(id__,0,
										          const_EXAX_n_waypoints))
							)\{|get_CLID_by_position|}
						)
						[| {|get_CLID_wait_for_move,wait_for_move::entered,terminate|} |]
						dbisim(Clock_CLID_wait_for_move(id__,0,
								          const_EXAX_n_waypoints))
					)\{|get_CLID_wait_for_move|}
				)
				) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__,
				    const_EXAX_n_waypoints) = 
			dbisim((let
				getsetLocalChannels = {|get_curr_waypoint,set_curr_waypoint,
				get_exax_move,set_exax_move|}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__,
						    const_EXAX_n_waypoints) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_EXAX_n_waypoints) [| {terminate} |] Clocks(id__,
				 		          const_EXAX_n_waypoints))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__,
				    const_EXAX_n_waypoints) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							IteratedBehaviour_VS_O(id__,
									    const_EXAX_n_waypoints)
							[| {|get_exax_move,set_exax_move,terminate|} |]
							Memory_exax_move((0,0))
						)\{|get_exax_move,set_exax_move|}
					)
					[| {|get_curr_waypoint,set_curr_waypoint,terminate|} |]
					Memory_curr_waypoint(0)
				)\{|get_curr_waypoint,set_curr_waypoint|}
			)
			)
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_curr_waypoint(curr_waypoint) =
			get_curr_waypoint!curr_waypoint -> Memory_curr_waypoint(curr_waypoint)
			[]
			set_curr_waypoint?x__ -> Memory_curr_waypoint(x__)
			[]
			terminate -> SKIP
		Memory_exax_move(exax_move) =
			get_exax_move!exax_move -> Memory_exax_move(exax_move)
			[]
			set_exax_move?x__ -> Memory_exax_move(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__,
				    const_EXAX_n_waypoints) = Memory_curr_waypoint(0)
		[| { terminate } |] (
		Memory_exax_move((0,0))
		)
		
		getsetLocalChannels = {|get_curr_waypoint,set_curr_waypoint,get_exax_move,set_exax_move|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
				    const_EXAX_n_waypoints) = STM_VS_O(id__,
				    const_EXAX_n_waypoints) \ localClockResets
		D__(id__,
				    const_EXAX_n_waypoints) = timed_priority(STM(id__,
				    const_EXAX_n_waypoints) \ union(internal_events,localClockResets))
		O__(id__,
				    const_EXAX_n_waypoints) = dbisim(D__(id__,
				    const_EXAX_n_waypoints))
		VS__(id__,
				    const_EXAX_n_waypoints) = FVS__(id__,
				    const_EXAX_n_waypoints)
		VS_O__(id__,
				    const_EXAX_n_waypoints) = dbisim(FVS__(id__,
				    const_EXAX_n_waypoints))
		HEXT__(id__,
				    const_EXAX_n_waypoints) = O__(id__,
				    const_EXAX_n_waypoints) [|shared_variable_events|] SKIP
		FVS_C__(id__,
				    const_EXAX_n_waypoints) = dbisim(timed_priority(STM(id__,
				    const_EXAX_n_waypoints) \ internal_events))
		HUP__(id__,
				    const_EXAX_n_waypoints) = timed_priority(O__(id__,
				    const_EXAX_n_waypoints) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__,
				          const_EXAX_n_waypoints) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_wait_for_move(id__,x__,
				          const_EXAX_n_waypoints) = 
			TimeOut_1(
				wait_for_move::entered -> Clock_CLID_wait_for_move(id__,0,
						          const_EXAX_n_waypoints)
				[]
				get_CLID_wait_for_move!x__ -> Clock_CLID_wait_for_move(id__,x__,
						          const_EXAX_n_waypoints)
				[]
				terminate -> SKIP,Clock_CLID_wait_for_move(id__,clock_type_plus(x__,1,CLID_wait_for_move_clock_type(id__,
						          const_EXAX_n_waypoints)),
						          const_EXAX_n_waypoints))
		Clock_CLID_by_position(id__,x__,
				          const_EXAX_n_waypoints) = 
			TimeOut_1(
				by_position::entered -> Clock_CLID_by_position(id__,0,
						          const_EXAX_n_waypoints)
				[]
				get_CLID_by_position!x__ -> Clock_CLID_by_position(id__,x__,
						          const_EXAX_n_waypoints)
				[]
				terminate -> SKIP,Clock_CLID_by_position(id__,clock_type_plus(x__,1,CLID_by_position_clock_type(id__,
						          const_EXAX_n_waypoints)),
						          const_EXAX_n_waypoints))
		Clock_CLID_reset_EXAX(id__,x__,
				          const_EXAX_n_waypoints) = 
			TimeOut_1(
				reset_EXAX::entered -> Clock_CLID_reset_EXAX(id__,0,
						          const_EXAX_n_waypoints)
				[]
				get_CLID_reset_EXAX!x__ -> Clock_CLID_reset_EXAX(id__,x__,
						          const_EXAX_n_waypoints)
				[]
				terminate -> SKIP,Clock_CLID_reset_EXAX(id__,clock_type_plus(x__,1,CLID_reset_EXAX_clock_type(id__,
						          const_EXAX_n_waypoints)),
						          const_EXAX_n_waypoints))
		
		StateClocks(id__,
				          const_EXAX_n_waypoints) = dbisim(Clock_CLID_wait_for_move(id__,0,
				          const_EXAX_n_waypoints))
		[| { terminate } |] (
		dbisim(Clock_CLID_by_position(id__,0,
				          const_EXAX_n_waypoints))
		[| { terminate } |] (
		dbisim(Clock_CLID_reset_EXAX(id__,0,
				          const_EXAX_n_waypoints))
		)
		)
		
		stateClockSync = {|get_CLID_wait_for_move,wait_for_move::entered,get_CLID_by_position,by_position::entered,get_CLID_reset_EXAX,reset_EXAX::entered|}
		
		-- Shared memory
		-- Shared memory variables
		Memory_sys_state(sys_state) =
			get_sys_state!sys_state -> Memory_sys_state(sys_state)
			[]
			set_sys_state?x__ -> Memory_sys_state(x__)
			[]
			set_EXT_sys_state?x__ -> Memory_sys_state(x__)
			[]
			terminate -> SKIP
		
		-- sharedVarMemory process
		sharedVarMemory(id__,
				    const_EXAX_n_waypoints) = Memory_sys_state(SystemState_wait_for_start)
		
		sharedVarSync = {|get_sys_state,set_sys_state,set_EXT_sys_state|}
		
		sharedVarHide = {|get_sys_state|}
		}
endmodule


