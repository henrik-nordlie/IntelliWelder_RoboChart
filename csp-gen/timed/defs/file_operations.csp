
--
-- RoboChart generator version 3.0.0.202311281716
-- Automatically generated on 10-04-2024 21:16:34
--
-- Iterated compression status: true
-- Assertions compression status: false
--





-- compileSelfContainedOperation
module OP_go_to_pos_with_velocity
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_update|
	              NID_f0|
	              NID_get_move_cmd
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_vel, set_vel, setL_vel, setR_vel: core_real
	channel get_curr_angle, set_curr_angle, setL_curr_angle, setR_curr_angle: core_real
	channel get_goal_angle, set_goal_angle, setL_goal_angle, setR_goal_angle: core_real
	channel get_goal_time, set_goal_time, setL_goal_time, setR_goal_time: core_real
	channel get_dist, set_dist, setL_dist, setR_dist: core_real
	channel get_finish_time, set_finish_time, setL_finish_time, setR_finish_time: core_real
	
	-- Shared variable channels
	channel set_EXT_curr_angle: core_real
	channel set_EXT_goal_angle: core_real
	channel set_EXT_goal_time: core_real
	channel set_EXT_dist: core_real
	channel set_EXT_finish_time: core_real
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	update::enter,
	f0::enter,
	get_move_cmd::enter
	|}
	
	enteredSS = 	{|
	update::entered,
	f0::entered,
	get_move_cmd::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
		set_EXT_curr_angle,
		set_EXT_goal_angle,
		set_EXT_goal_time,
		set_EXT_dist,
		set_EXT_finish_time
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	set_EXT_curr_angle, set_curr_angle,
		set_EXT_goal_angle, set_goal_angle,
		set_EXT_goal_time, set_goal_time,
		set_EXT_dist, set_dist,
		set_EXT_finish_time, set_finish_time
		, share__
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_get_move_cmd : core_clock_type 
	channel get_CLID_update : core_clock_type 
	channel get_CLID_f0 : core_clock_type 
	--channel increment__
	
	CLID_get_move_cmd_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_update_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_f0_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	
	
		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
							param_dist,
							param_time_budget) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
							param_dist,
							param_time_budget) = D__(id__,
							param_dist,
							param_time_budget)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: update
		module update
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_dist,
							param_time_budget) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_dist?dist -> param_time_budget != 0 & (share__choice(set_vel!Div(dist, no_zero_div(param_time_budget), core_real) -> SKIP))));share__choice(share__choice(get_vel?vel -> share__choice(get_dist?dist -> dist != 0 & (share__choice(set_finish_time!Div(vel, no_zero_div(dist), core_real) -> SKIP))))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_dist,
							param_time_budget) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_dist?dist -> param_time_budget != 0 & (share__choice(set_vel!Div(dist, no_zero_div(param_time_budget), core_real) -> SKIP))));share__choice(share__choice(get_vel?vel -> share__choice(get_dist?dist -> dist != 0 & (share__choice(set_finish_time!Div(vel, no_zero_div(dist), core_real) -> SKIP))))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Final state: f0
		module f0
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__,
							param_dist,
							param_time_budget) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_dist,
							param_time_budget) = D__(id__,
							param_dist,
							param_time_budget)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: get_move_cmd
		module get_move_cmd
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_dist,
							param_time_budget) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_dist,
							param_time_budget) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
					param_dist,
					param_time_budget) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__,
					param_dist,
					param_time_budget) \ {terminate}
		
		STM_VS_O(id__,
					param_dist,
					param_time_budget) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__,
					param_dist,
					param_time_budget) \ {terminate}
		
		-- Transitions
		Transitions(id__,
					param_dist,
					param_time_budget) = ((let
			Trans = TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; get_move_cmd::enter -> SKIP))))
				 [] dbisim((true)&(internal__!NID_update -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
				 [] dbisim(((param_time_budget>0))&(internal__!NID_get_move_cmd -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; update::enter -> SKIP)))
				 [] dbisim(((param_time_budget==0))&(internal__!NID_get_move_cmd -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_finish_time!0 -> SKIP))) ; f0::enter -> SKIP)))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
					param_dist,
					param_time_budget) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					update::enter,
					f0::enter,
					get_move_cmd::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,internal__.NID_update,internal__.NID_get_move_cmd,internal__.NID_get_move_cmd|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::D__(id__,
						   			param_dist,
						   			param_time_budget)
						   [| { share__, terminate } |] (
						   update::D__(id__,
						   			param_dist,
						   			param_time_budget)
						   [| { share__, terminate } |] (
						   f0::D__(id__,
						   			param_dist,
						   			param_time_budget)
						   [| { share__, terminate } |] (
						   get_move_cmd::D__(id__,
						   			param_dist,
						   			param_time_budget)
						   )
						   )
						   )
						 )
						 [[update::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_update|}]]
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[get_move_cmd::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_get_move_cmd,internal__.NID_get_move_cmd|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						|}) |]
						 ((i0::enter -> Transitions(id__,
						 			param_dist,
						 			param_time_budget))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
					param_dist,
					param_time_budget) = 
			dbisim((let
				stateClockSync = {|get_CLID_get_move_cmd,get_move_cmd::entered,get_CLID_update,update::entered|}
			 within
				(MachineBody(id__,
							param_dist,
							param_time_budget) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__,
					param_dist,
					param_time_budget) = 
			dbisim((let
				stateClockSync = {|get_CLID_get_move_cmd,get_move_cmd::entered,get_CLID_update,update::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								MachineBody(id__,
											param_dist,
											param_time_budget)
								[| {|get_CLID_update,update::entered,terminate|} |]
								dbisim(Clock_CLID_update(id__,0))
							)\{|get_CLID_update|}
						)
						[| {|get_CLID_get_move_cmd,get_move_cmd::entered,terminate|} |]
						dbisim(Clock_CLID_get_move_cmd(id__,0))
					)\{|get_CLID_get_move_cmd|}
				)
				) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__,
					param_dist,
					param_time_budget) = 
			((let
				getsetLocalChannels = {|get_vel,set_vel|}
				clockSync = {||}
			within
				(Behaviour(id__,
							param_dist,
							param_time_budget) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 			param_dist,
				 			param_time_budget) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__,
					param_dist,
					param_time_budget) =
			(dbisim(
				sbisim(
					IteratedBehaviour(id__,
								param_dist,
								param_time_budget)
					[| {|get_vel,set_vel,terminate|} |]
					Memory_vel(0)
				)\{|get_vel,set_vel|}
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
					param_dist,
					param_time_budget) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					update::enter,
					f0::enter,
					get_move_cmd::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,internal__.NID_update,internal__.NID_get_move_cmd,internal__.NID_get_move_cmd|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::VS_O__(id__,
						   			param_dist,
						   			param_time_budget)
						   [| { share__, terminate } |] (
						   update::VS_O__(id__,
						   			param_dist,
						   			param_time_budget)
						   [| { share__, terminate } |] (
						   f0::VS_O__(id__,
						   			param_dist,
						   			param_time_budget)
						   [| { share__, terminate } |] (
						   get_move_cmd::VS_O__(id__,
						   			param_dist,
						   			param_time_budget)
						   )
						   )
						   )
						 )
						 [[update::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_update|}]]
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[get_move_cmd::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_get_move_cmd,internal__.NID_get_move_cmd|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						|}) |]
						 ((i0::enter -> Transitions(id__,
						 			param_dist,
						 			param_time_budget))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
					param_dist,
					param_time_budget) = 
			dbisim((let
				stateClockSync = {|get_CLID_get_move_cmd,get_move_cmd::entered,get_CLID_update,update::entered|}
			 within
				(MachineBody_VS_O(id__,
							param_dist,
							param_time_budget) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__,
					param_dist,
					param_time_budget) = 
			dbisim((let
				stateClockSync = {|get_CLID_get_move_cmd,get_move_cmd::entered,get_CLID_update,update::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								MachineBody_VS_O(id__,
											param_dist,
											param_time_budget)
								[| {|get_CLID_update,update::entered,terminate|} |]
								dbisim(Clock_CLID_update(id__,0))
							)\{|get_CLID_update|}
						)
						[| {|get_CLID_get_move_cmd,get_move_cmd::entered,terminate|} |]
						dbisim(Clock_CLID_get_move_cmd(id__,0))
					)\{|get_CLID_get_move_cmd|}
				)
				) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__,
					param_dist,
					param_time_budget) = 
			dbisim((let
				getsetLocalChannels = {|get_vel,set_vel|}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__,
							param_dist,
							param_time_budget) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 			param_dist,
				 			param_time_budget) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__,
					param_dist,
					param_time_budget) =
			(dbisim(
				sbisim(
					IteratedBehaviour_VS_O(id__,
								param_dist,
								param_time_budget)
					[| {|get_vel,set_vel,terminate|} |]
					Memory_vel(0)
				)\{|get_vel,set_vel|}
			)
			)
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_vel(vel) =
			get_vel!vel -> Memory_vel(vel)
			[]
			set_vel?x__ -> Memory_vel(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__,
					param_dist,
					param_time_budget) = Memory_vel(0)
		
		getsetLocalChannels = {|get_vel,set_vel|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
					param_dist,
					param_time_budget) = STM_VS_O(id__,
					param_dist,
					param_time_budget) \ localClockResets
		D__(id__,
					param_dist,
					param_time_budget) = timed_priority(STM(id__,
					param_dist,
					param_time_budget) \ union(internal_events,localClockResets))
		O__(id__,
					param_dist,
					param_time_budget) = dbisim(D__(id__,
					param_dist,
					param_time_budget))
		VS__(id__,
					param_dist,
					param_time_budget) = FVS__(id__,
					param_dist,
					param_time_budget)
		VS_O__(id__,
					param_dist,
					param_time_budget) = dbisim(FVS__(id__,
					param_dist,
					param_time_budget))
		HEXT__(id__,
					param_dist,
					param_time_budget) = O__(id__,
					param_dist,
					param_time_budget) [|shared_variable_events|] SKIP
		FVS_C__(id__,
					param_dist,
					param_time_budget) = dbisim(timed_priority(STM(id__,
					param_dist,
					param_time_budget) \ internal_events))
		HUP__(id__,
					param_dist,
					param_time_budget) = timed_priority(O__(id__,
					param_dist,
					param_time_budget) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_get_move_cmd(id__,x__) = 
			TimeOut_1(
				get_move_cmd::entered -> Clock_CLID_get_move_cmd(id__,0)
				[]
				get_CLID_get_move_cmd!x__ -> Clock_CLID_get_move_cmd(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_get_move_cmd(id__,clock_type_plus(x__,1,CLID_get_move_cmd_clock_type(id__))))
		Clock_CLID_update(id__,x__) = 
			TimeOut_1(
				update::entered -> Clock_CLID_update(id__,0)
				[]
				get_CLID_update!x__ -> Clock_CLID_update(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_update(id__,clock_type_plus(x__,1,CLID_update_clock_type(id__))))
		
		StateClocks(id__) = dbisim(Clock_CLID_get_move_cmd(id__,0))
		[| { terminate } |] (
		dbisim(Clock_CLID_update(id__,0))
		)
		
		stateClockSync = {|get_CLID_get_move_cmd,get_move_cmd::entered,get_CLID_update,update::entered|}
		}
			endmodule
-- compileSelfContainedOperation
module OP_moveJ
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_get_move_cmd|
	              NID_calc_vel|
	              NID_f0|
	              NID_update_time
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_jv1, set_jv1, setL_jv1, setR_jv1: core_real
	channel get_jv2, set_jv2, setL_jv2, setR_jv2: core_real
	channel get_curr_angle1, set_curr_angle1, setL_curr_angle1, setR_curr_angle1: core_real
	channel get_curr_angle2, set_curr_angle2, setL_curr_angle2, setR_curr_angle2: core_real
	channel get_goal_angle1, set_goal_angle1, setL_goal_angle1, setR_goal_angle1: core_real
	channel get_goal_angle2, set_goal_angle2, setL_goal_angle2, setR_goal_angle2: core_real
	channel get_time_budget, set_time_budget, setL_time_budget, setR_time_budget: core_real
	channel get_jd1, set_jd1, setL_jd1, setR_jd1: core_real
	channel get_jd2, set_jd2, setL_jd2, setR_jd2: core_real
	channel get_finish_time1, set_finish_time1, setL_finish_time1, setR_finish_time1: core_real
	channel get_finish_time2, set_finish_time2, setL_finish_time2, setR_finish_time2: core_real
	
	-- Shared variable channels
	channel set_EXT_curr_angle1: core_real
	channel set_EXT_curr_angle2: core_real
	channel set_EXT_goal_angle1: core_real
	channel set_EXT_goal_angle2: core_real
	channel set_EXT_time_budget: core_real
	channel set_EXT_jd1: core_real
	channel set_EXT_jd2: core_real
	channel set_EXT_finish_time1: core_real
	channel set_EXT_finish_time2: core_real
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	get_move_cmd::enter,
	calc_vel::enter,
	f0::enter,
	update_time::enter
	|}
	
	enteredSS = 	{|
	get_move_cmd::entered,
	calc_vel::entered,
	f0::entered,
	update_time::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
		set_EXT_curr_angle1,
		set_EXT_curr_angle2,
		set_EXT_goal_angle1,
		set_EXT_goal_angle2,
		set_EXT_time_budget,
		set_EXT_jd1,
		set_EXT_jd2,
		set_EXT_finish_time1,
		set_EXT_finish_time2
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	set_EXT_curr_angle1, set_curr_angle1,
		set_EXT_curr_angle2, set_curr_angle2,
		set_EXT_goal_angle1, set_goal_angle1,
		set_EXT_goal_angle2, set_goal_angle2,
		set_EXT_time_budget, set_time_budget,
		set_EXT_jd1, set_jd1,
		set_EXT_jd2, set_jd2,
		set_EXT_finish_time1, set_finish_time1,
		set_EXT_finish_time2, set_finish_time2
		, share__
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_calc_vel : core_clock_type 
	channel get_CLID_get_move_cmd : core_clock_type 
	channel get_CLID_f0 : core_clock_type 
	channel get_CLID_update_time : core_clock_type 
	--channel increment__
	
	CLID_calc_vel_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_get_move_cmd_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_f0_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_update_time_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	
	
		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
							param_jd1,
							param_jd2,
							param_goal_time) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
							param_jd1,
							param_jd2,
							param_goal_time) = D__(id__,
							param_jd1,
							param_jd2,
							param_goal_time)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: get_move_cmd
		module get_move_cmd
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_jd1,
							param_jd2,
							param_goal_time) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_jd1,
							param_jd2,
							param_goal_time) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: calc_vel
		module calc_vel
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_jd1,
							param_jd2,
							param_goal_time) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_jd1?jd1 -> param_goal_time != 0 & (share__choice(set_jv1!Div(jd1, no_zero_div(param_goal_time), core_real) -> SKIP))));share__choice(share__choice(get_jd2?jd2 -> param_goal_time != 0 & (share__choice(set_jv2!Div(jd2, no_zero_div(param_goal_time), core_real) -> SKIP)))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_jd1,
							param_jd2,
							param_goal_time) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_jd1?jd1 -> param_goal_time != 0 & (share__choice(set_jv1!Div(jd1, no_zero_div(param_goal_time), core_real) -> SKIP))));share__choice(share__choice(get_jd2?jd2 -> param_goal_time != 0 & (share__choice(set_jv2!Div(jd2, no_zero_div(param_goal_time), core_real) -> SKIP)))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Final state: f0
		module f0
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__,
							param_jd1,
							param_jd2,
							param_goal_time) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_jd1,
							param_jd2,
							param_goal_time) = D__(id__,
							param_jd1,
							param_jd2,
							param_goal_time)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: update_time
		module update_time
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
							param_jd1,
							param_jd2,
							param_goal_time) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_jv1?jv1 -> share__choice(get_jd1?jd1 -> jv1 != 0 & (share__choice(set_finish_time1!Div(jd1, no_zero_div(jv1), core_real) -> SKIP)))));share__choice(share__choice(get_jd2?jd2 -> share__choice(get_jv2?jv2 -> jv2 != 0 & (share__choice(set_finish_time2!Div(jd2, no_zero_div(jv2), core_real) -> SKIP))))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_jd1,
							param_jd2,
							param_goal_time) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(share__choice(get_jv1?jv1 -> share__choice(get_jd1?jd1 -> jv1 != 0 & (share__choice(set_finish_time1!Div(jd1, no_zero_div(jv1), core_real) -> SKIP)))));share__choice(share__choice(get_jd2?jd2 -> share__choice(get_jv2?jv2 -> jv2 != 0 & (share__choice(set_finish_time2!Div(jd2, no_zero_div(jv2), core_real) -> SKIP))))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__,
					param_jd1,
					param_jd2,
					param_goal_time) \ {terminate}
		
		STM_VS_O(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__,
					param_jd1,
					param_jd2,
					param_goal_time) \ {terminate}
		
		-- Transitions
		Transitions(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = ((let
			Trans = TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; get_move_cmd::enter -> SKIP))))
				 [] dbisim(((param_goal_time>0))&(internal__!NID_get_move_cmd -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; calc_vel::enter -> SKIP)))
				 [] dbisim((true)&(internal__!NID_update_time -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
				 [] dbisim(((param_goal_time==0))&(internal__!NID_get_move_cmd -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_finish_time1!0 -> SKIP)));share__choice(true & (share__choice(set_finish_time1!0 -> SKIP))) ; f0::enter -> SKIP)))
				 [] dbisim((true)&(internal__!NID_calc_vel -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; update_time::enter -> SKIP)))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					get_move_cmd::enter,
					calc_vel::enter,
					f0::enter,
					update_time::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,internal__.NID_get_move_cmd,internal__.NID_update_time,internal__.NID_get_move_cmd,internal__.NID_calc_vel|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::D__(id__,
						   			param_jd1,
						   			param_jd2,
						   			param_goal_time)
						   [| { share__, terminate } |] (
						   get_move_cmd::D__(id__,
						   			param_jd1,
						   			param_jd2,
						   			param_goal_time)
						   [| { share__, terminate } |] (
						   calc_vel::D__(id__,
						   			param_jd1,
						   			param_jd2,
						   			param_goal_time)
						   [| { share__, terminate } |] (
						   f0::D__(id__,
						   			param_jd1,
						   			param_jd2,
						   			param_goal_time)
						   [| { share__, terminate } |] (
						   update_time::D__(id__,
						   			param_jd1,
						   			param_jd2,
						   			param_goal_time)
						   )
						   )
						   )
						   )
						 )
						 [[get_move_cmd::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_get_move_cmd,internal__.NID_get_move_cmd|}]]
						 [[calc_vel::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_calc_vel|}]]
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[update_time::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_update_time|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						|}) |]
						 ((i0::enter -> Transitions(id__,
						 			param_jd1,
						 			param_jd2,
						 			param_goal_time))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = 
			dbisim((let
				stateClockSync = {|get_CLID_calc_vel,calc_vel::entered,get_CLID_get_move_cmd,get_move_cmd::entered,get_CLID_update_time,update_time::entered|}
			 within
				(MachineBody(id__,
							param_jd1,
							param_jd2,
							param_goal_time) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = 
			dbisim((let
				stateClockSync = {|get_CLID_calc_vel,calc_vel::entered,get_CLID_get_move_cmd,get_move_cmd::entered,get_CLID_update_time,update_time::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody(id__,
													param_jd1,
													param_jd2,
													param_goal_time)
										[| {|get_CLID_update_time,update_time::entered,terminate|} |]
										dbisim(Clock_CLID_update_time(id__,0))
									)\{|get_CLID_update_time|}
								)
								[| {|get_CLID_get_move_cmd,get_move_cmd::entered,terminate|} |]
								dbisim(Clock_CLID_get_move_cmd(id__,0))
							)\{|get_CLID_get_move_cmd|}
						)
						[| {|get_CLID_calc_vel,calc_vel::entered,terminate|} |]
						dbisim(Clock_CLID_calc_vel(id__,0))
					)\{|get_CLID_calc_vel|}
				)
				) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = 
			((let
				getsetLocalChannels = {|get_jv1,set_jv1,
				get_jv2,set_jv2|}
				clockSync = {||}
			within
				(Behaviour(id__,
							param_jd1,
							param_jd2,
							param_goal_time) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 			param_jd1,
				 			param_jd2,
				 			param_goal_time) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__,
					param_jd1,
					param_jd2,
					param_goal_time) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							IteratedBehaviour(id__,
										param_jd1,
										param_jd2,
										param_goal_time)
							[| {|get_jv2,set_jv2,terminate|} |]
							Memory_jv2(0)
						)\{|get_jv2,set_jv2|}
					)
					[| {|get_jv1,set_jv1,terminate|} |]
					Memory_jv1(0)
				)\{|get_jv1,set_jv1|}
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					get_move_cmd::enter,
					calc_vel::enter,
					f0::enter,
					update_time::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,internal__.NID_get_move_cmd,internal__.NID_update_time,internal__.NID_get_move_cmd,internal__.NID_calc_vel|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::VS_O__(id__,
						   			param_jd1,
						   			param_jd2,
						   			param_goal_time)
						   [| { share__, terminate } |] (
						   get_move_cmd::VS_O__(id__,
						   			param_jd1,
						   			param_jd2,
						   			param_goal_time)
						   [| { share__, terminate } |] (
						   calc_vel::VS_O__(id__,
						   			param_jd1,
						   			param_jd2,
						   			param_goal_time)
						   [| { share__, terminate } |] (
						   f0::VS_O__(id__,
						   			param_jd1,
						   			param_jd2,
						   			param_goal_time)
						   [| { share__, terminate } |] (
						   update_time::VS_O__(id__,
						   			param_jd1,
						   			param_jd2,
						   			param_goal_time)
						   )
						   )
						   )
						   )
						 )
						 [[get_move_cmd::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_get_move_cmd,internal__.NID_get_move_cmd|}]]
						 [[calc_vel::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_calc_vel|}]]
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[update_time::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_update_time|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						|}) |]
						 ((i0::enter -> Transitions(id__,
						 			param_jd1,
						 			param_jd2,
						 			param_goal_time))
						  [[ share__ <- x__ | x__ <- {| share__ |} ]]
						 )
						)
						)
					)
					 \ hideSet)
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = 
			dbisim((let
				stateClockSync = {|get_CLID_calc_vel,calc_vel::entered,get_CLID_get_move_cmd,get_move_cmd::entered,get_CLID_update_time,update_time::entered|}
			 within
				(MachineBody_VS_O(id__,
							param_jd1,
							param_jd2,
							param_goal_time) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = 
			dbisim((let
				stateClockSync = {|get_CLID_calc_vel,calc_vel::entered,get_CLID_get_move_cmd,get_move_cmd::entered,get_CLID_update_time,update_time::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										MachineBody_VS_O(id__,
													param_jd1,
													param_jd2,
													param_goal_time)
										[| {|get_CLID_update_time,update_time::entered,terminate|} |]
										dbisim(Clock_CLID_update_time(id__,0))
									)\{|get_CLID_update_time|}
								)
								[| {|get_CLID_get_move_cmd,get_move_cmd::entered,terminate|} |]
								dbisim(Clock_CLID_get_move_cmd(id__,0))
							)\{|get_CLID_get_move_cmd|}
						)
						[| {|get_CLID_calc_vel,calc_vel::entered,terminate|} |]
						dbisim(Clock_CLID_calc_vel(id__,0))
					)\{|get_CLID_calc_vel|}
				)
				) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = 
			dbisim((let
				getsetLocalChannels = {|get_jv1,set_jv1,
				get_jv2,set_jv2|}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__,
							param_jd1,
							param_jd2,
							param_goal_time) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 			param_jd1,
				 			param_jd2,
				 			param_goal_time) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__,
					param_jd1,
					param_jd2,
					param_goal_time) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							IteratedBehaviour_VS_O(id__,
										param_jd1,
										param_jd2,
										param_goal_time)
							[| {|get_jv2,set_jv2,terminate|} |]
							Memory_jv2(0)
						)\{|get_jv2,set_jv2|}
					)
					[| {|get_jv1,set_jv1,terminate|} |]
					Memory_jv1(0)
				)\{|get_jv1,set_jv1|}
			)
			)
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_jv1(jv1) =
			get_jv1!jv1 -> Memory_jv1(jv1)
			[]
			set_jv1?x__ -> Memory_jv1(x__)
			[]
			terminate -> SKIP
		Memory_jv2(jv2) =
			get_jv2!jv2 -> Memory_jv2(jv2)
			[]
			set_jv2?x__ -> Memory_jv2(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = Memory_jv1(0)
		[| { terminate } |] (
		Memory_jv2(0)
		)
		
		getsetLocalChannels = {|get_jv1,set_jv1,get_jv2,set_jv2|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = STM_VS_O(id__,
					param_jd1,
					param_jd2,
					param_goal_time) \ localClockResets
		D__(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = timed_priority(STM(id__,
					param_jd1,
					param_jd2,
					param_goal_time) \ union(internal_events,localClockResets))
		O__(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = dbisim(D__(id__,
					param_jd1,
					param_jd2,
					param_goal_time))
		VS__(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = FVS__(id__,
					param_jd1,
					param_jd2,
					param_goal_time)
		VS_O__(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = dbisim(FVS__(id__,
					param_jd1,
					param_jd2,
					param_goal_time))
		HEXT__(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = O__(id__,
					param_jd1,
					param_jd2,
					param_goal_time) [|shared_variable_events|] SKIP
		FVS_C__(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = dbisim(timed_priority(STM(id__,
					param_jd1,
					param_jd2,
					param_goal_time) \ internal_events))
		HUP__(id__,
					param_jd1,
					param_jd2,
					param_goal_time) = timed_priority(O__(id__,
					param_jd1,
					param_jd2,
					param_goal_time) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_calc_vel(id__,x__) = 
			TimeOut_1(
				calc_vel::entered -> Clock_CLID_calc_vel(id__,0)
				[]
				get_CLID_calc_vel!x__ -> Clock_CLID_calc_vel(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_calc_vel(id__,clock_type_plus(x__,1,CLID_calc_vel_clock_type(id__))))
		Clock_CLID_get_move_cmd(id__,x__) = 
			TimeOut_1(
				get_move_cmd::entered -> Clock_CLID_get_move_cmd(id__,0)
				[]
				get_CLID_get_move_cmd!x__ -> Clock_CLID_get_move_cmd(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_get_move_cmd(id__,clock_type_plus(x__,1,CLID_get_move_cmd_clock_type(id__))))
		Clock_CLID_update_time(id__,x__) = 
			TimeOut_1(
				update_time::entered -> Clock_CLID_update_time(id__,0)
				[]
				get_CLID_update_time!x__ -> Clock_CLID_update_time(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_update_time(id__,clock_type_plus(x__,1,CLID_update_time_clock_type(id__))))
		
		StateClocks(id__) = dbisim(Clock_CLID_calc_vel(id__,0))
		[| { terminate } |] (
		dbisim(Clock_CLID_get_move_cmd(id__,0))
		[| { terminate } |] (
		dbisim(Clock_CLID_update_time(id__,0))
		)
		)
		
		stateClockSync = {|get_CLID_calc_vel,calc_vel::entered,get_CLID_get_move_cmd,get_move_cmd::entered,get_CLID_update_time,update_time::entered|}
		}
			endmodule

