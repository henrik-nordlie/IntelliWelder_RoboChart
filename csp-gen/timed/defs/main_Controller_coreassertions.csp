
--
-- RoboChart generator version 3.0.0.202311281716
-- Automatically generated on 14-05-2024 09:23:34
--
-- Iterated compression status: true
-- Assertions compression status: false
--

include "core_timed_defs.csp"
include "file_main_defs.csp"
include "core_defs.csp"
include "state_timed_defs.csp"
include "robochart_defs.csp"
include "main_Controller.csp"
include "../instantiations.csp"

transparent wbisim
channel r__
-- generate main_Controller
P_main_Controller = let
	id__ = 0
	
	
	
	const_main_Controller_stm_ref1_ur_n_waypoints = 3
	const_main_Controller_stm_ref2_n_waypoints = 1
		
within
	main_Controller::O__(id__,
			    const_main_Controller_stm_ref1_ur_n_waypoints,
			    const_main_Controller_stm_ref2_n_waypoints)

assert P_main_Controller :[deadlock-free]	
assert P_main_Controller;RUN({r__}) :[deadlock-free]
assert P_main_Controller :[deterministic]
assert P_main_Controller :[divergence-free]

-- generate main_Controller_stm_ref0
P_main_Controller_stm_ref0 = let
	id__ = 0
	
	
	
within
	main_Controller::stm_ref0::O__(
		id__
	)
assert P_main_Controller_stm_ref0 :[deadlock-free]	
assert P_main_Controller_stm_ref0;RUN({r__}) :[deadlock-free]
assert P_main_Controller_stm_ref0 :[deterministic]
assert P_main_Controller_stm_ref0 :[divergence-free]
-- timed deadlock free
assert prioritise(P_main_Controller_stm_ref0[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_main_Controller_stm_ref0
-- generate main_Controller_stm_ref1
P_main_Controller_stm_ref1 = let
	id__ = 0
	
	
	const_UR_ur_n_waypoints = 3
	
within
	main_Controller::stm_ref1::O__(
		id__,
		const_UR_ur_n_waypoints
	)
assert P_main_Controller_stm_ref1 :[deadlock-free]	
assert P_main_Controller_stm_ref1;RUN({r__}) :[deadlock-free]
assert P_main_Controller_stm_ref1 :[deterministic]
assert P_main_Controller_stm_ref1 :[divergence-free]
-- timed deadlock free
assert prioritise(P_main_Controller_stm_ref1[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_main_Controller_stm_ref1
-- generate main_Controller_stm_ref2
P_main_Controller_stm_ref2 = let
	id__ = 0
	
	
	const_EXAX_n_waypoints = 1
	
within
	main_Controller::stm_ref2::O__(
		id__,
		const_EXAX_n_waypoints
	)
assert P_main_Controller_stm_ref2 :[deadlock-free]	
assert P_main_Controller_stm_ref2;RUN({r__}) :[deadlock-free]
assert P_main_Controller_stm_ref2 :[deterministic]
assert P_main_Controller_stm_ref2 :[divergence-free]
-- timed deadlock free
assert prioritise(P_main_Controller_stm_ref2[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_main_Controller_stm_ref2
-- generate main_Controller_stm_ref4
P_main_Controller_stm_ref4 = let
	id__ = 0
	
	
	
within
	main_Controller::stm_ref4::O__(
		id__
	)
assert P_main_Controller_stm_ref4 :[deadlock-free]	
assert P_main_Controller_stm_ref4;RUN({r__}) :[deadlock-free]
assert P_main_Controller_stm_ref4 :[deterministic]
assert P_main_Controller_stm_ref4 :[divergence-free]
-- timed deadlock free
assert prioritise(P_main_Controller_stm_ref4[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_main_Controller_stm_ref4
-- generate main_Controller_stm_ref3
P_main_Controller_stm_ref3 = let
	id__ = 0
	
	
	
within
	main_Controller::stm_ref3::O__(
		id__
	)
assert P_main_Controller_stm_ref3 :[deadlock-free]	
assert P_main_Controller_stm_ref3;RUN({r__}) :[deadlock-free]
assert P_main_Controller_stm_ref3 :[deterministic]
assert P_main_Controller_stm_ref3 :[divergence-free]
-- timed deadlock free
assert prioritise(P_main_Controller_stm_ref3[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_main_Controller_stm_ref3
-- timed deadlock free
assert prioritise(P_main_Controller[[tock<-tock,tock<-tock']],<diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]]

-- timelock free
assert RUN({tock}) ||| CHAOS(diff(Events,{|tock|})) [F= P_main_Controller
