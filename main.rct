module main {
	controller Controller {
	sref stm_ref0 = System
	event start_system
	event next_UR_move : UR_move
	sref stm_ref1 = UR
	sref stm_ref2 = EXAX
	connection Controller on start_system to stm_ref0 on start_system
	connection stm_ref1 on all_done to stm_ref0 on UR_done
	event next_EXAX_move : EXAX_move
	connection stm_ref2 on done to stm_ref0 on EXAX_done
	requires ur_ops 
	requires exax_ops 
	
	
	
	sref stm_ref4 = out_of_sync_relaySTM

		connection stm_ref1 on out_of_sync to stm_ref4 on UR_out_of_sync
		connection stm_ref2 on out_of_sync to stm_ref4 on EXAX_out_of_sync
		connection stm_ref4 on system_out_of_sync to stm_ref0 on out_of_sync
	connection Controller on next_EXAX_move to stm_ref2 on move
		connection Controller on next_UR_move to stm_ref1 on move
	requires StateInf }

	robotic platform Platform {
	uses events 
	provides ur_ops 
	provides exax_ops 
	provides StateInf }

connection Platform on start_system to Controller on start_system ( _async )
connection Platform on next_UR_move to Controller on next_UR_move ( _async )
	connection Platform on next_EXAX_move to Controller on next_EXAX_move ( _async )
}

interface events {
	event start_system

	event next_UR_move : UR_move
event next_EXAX_move : EXAX_move
}

datatype UR_move {
	curr_angle1:real
	goal_angle1:real
	curr_angle2:real
	goal_angle2:real
	 goal_time : real } 
datatype EXAX_move {
	curr_angle:real
	goal_angle:real
	
 goal_time : real } interface ur_ops {
	moveJ (  goal_angle1 : real ,  goal_angle2 : real ,  jv : real )
}

interface exax_ops {
	go_to_pos_with_velocity (   dist : real ,   time_budget : real )

}

enumeration SystemState { wait_for_start working UR_finished EXAX_finished } interface StateInf {
	var sys_state : SystemState
}

